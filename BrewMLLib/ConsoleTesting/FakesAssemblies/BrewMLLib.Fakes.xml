<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BrewMLLib.Fakes</name>
    </assembly>
    <members>
        <member name="T:BrewMLLib.Fakes.ShimBaseEquip">
            <summary>Shim type of BrewMLLib.BaseEquip</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimBaseEquip.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimBaseEquip.#ctor(BrewMLLib.BaseEquip)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimBaseEquip.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimBaseEquip.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBaseEquip.AssetTagGet">
            <summary>Sets the shim of BaseEquip.get_AssetTag()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBaseEquip.AssetTagSetString">
            <summary>Sets the shim of BaseEquip.set_AssetTag(String value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBaseEquip.BaseEquipIDGet">
            <summary>Sets the shim of BaseEquip.get_BaseEquipID()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBaseEquip.BaseEquipIDSetInt32">
            <summary>Sets the shim of BaseEquip.set_BaseEquipID(Int32 value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBaseEquip.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBaseEquip.Constructor">
            <summary>Sets the shim of BaseEquip.BaseEquip()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBaseEquip.DescriptionGet">
            <summary>Sets the shim of BaseEquip.get_Description()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBaseEquip.DescriptionSetString">
            <summary>Sets the shim of BaseEquip.set_Description(String value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBaseEquip.EquipNameGet">
            <summary>Sets the shim of BaseEquip.get_EquipName()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBaseEquip.EquipNameSetString">
            <summary>Sets the shim of BaseEquip.set_EquipName(String value)</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.ShimBaseEquip.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBaseEquip.AllInstances.AssetTagGet">
            <summary>Sets the shim of BaseEquip.get_AssetTag()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBaseEquip.AllInstances.AssetTagSetString">
            <summary>Sets the shim of BaseEquip.set_AssetTag(String value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBaseEquip.AllInstances.BaseEquipIDGet">
            <summary>Sets the shim of BaseEquip.get_BaseEquipID()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBaseEquip.AllInstances.BaseEquipIDSetInt32">
            <summary>Sets the shim of BaseEquip.set_BaseEquipID(Int32 value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBaseEquip.AllInstances.DescriptionGet">
            <summary>Sets the shim of BaseEquip.get_Description()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBaseEquip.AllInstances.DescriptionSetString">
            <summary>Sets the shim of BaseEquip.set_Description(String value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBaseEquip.AllInstances.EquipNameGet">
            <summary>Sets the shim of BaseEquip.get_EquipName()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBaseEquip.AllInstances.EquipNameSetString">
            <summary>Sets the shim of BaseEquip.set_EquipName(String value)</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.ShimBatch">
            <summary>Shim type of BrewMLLib.Batch</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimBatch.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimBatch.#ctor(BrewMLLib.Batch)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimBatch.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimBatch.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBatch.AllocatedUnitsGet">
            <summary>Sets the shim of Batch.get_AllocatedUnits()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBatch.AllocatedUnitsSetICollectionOfUnit">
            <summary>Sets the shim of Batch.set_AllocatedUnits(ICollection`1&lt;Unit&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBatch.BatchIDGet">
            <summary>Sets the shim of Batch.get_BatchID()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBatch.BatchIDSetInt32">
            <summary>Sets the shim of Batch.set_BatchID(Int32 value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBatch.BatchLocationGet">
            <summary>Sets the shim of Batch.get_BatchLocation()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBatch.BatchLocationSetString">
            <summary>Sets the shim of Batch.set_BatchLocation(String value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBatch.BatchNameGet">
            <summary>Sets the shim of Batch.get_BatchName()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBatch.BatchNameSetString">
            <summary>Sets the shim of Batch.set_BatchName(String value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBatch.BatchRecipeGet">
            <summary>Sets the shim of Batch.get_BatchRecipe()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBatch.BatchRecipeSetMasterRecipe">
            <summary>Sets the shim of Batch.set_BatchRecipe(MasterRecipe value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBatch.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBatch.Constructor">
            <summary>Sets the shim of Batch.Batch()</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.ShimBatch.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBatch.AllInstances.AllocatedUnitsGet">
            <summary>Sets the shim of Batch.get_AllocatedUnits()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBatch.AllInstances.AllocatedUnitsSetICollectionOfUnit">
            <summary>Sets the shim of Batch.set_AllocatedUnits(ICollection`1&lt;Unit&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBatch.AllInstances.BatchIDGet">
            <summary>Sets the shim of Batch.get_BatchID()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBatch.AllInstances.BatchIDSetInt32">
            <summary>Sets the shim of Batch.set_BatchID(Int32 value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBatch.AllInstances.BatchLocationGet">
            <summary>Sets the shim of Batch.get_BatchLocation()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBatch.AllInstances.BatchLocationSetString">
            <summary>Sets the shim of Batch.set_BatchLocation(String value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBatch.AllInstances.BatchNameGet">
            <summary>Sets the shim of Batch.get_BatchName()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBatch.AllInstances.BatchNameSetString">
            <summary>Sets the shim of Batch.set_BatchName(String value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBatch.AllInstances.BatchRecipeGet">
            <summary>Sets the shim of Batch.get_BatchRecipe()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBatch.AllInstances.BatchRecipeSetMasterRecipe">
            <summary>Sets the shim of Batch.set_BatchRecipe(MasterRecipe value)</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.ShimBrewDBContext">
            <summary>Shim type of BrewMLLib.BrewDBContext</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimBrewDBContext.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimBrewDBContext.#ctor(BrewMLLib.BrewDBContext)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimBrewDBContext.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimBrewDBContext.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimBrewDBContext.Bind(System.Data.Entity.Infrastructure.IObjectContextAdapter)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimBrewDBContext.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.AddEQControlLoopToPlantInt32EQControlLoop">
            <summary>Sets the shim of BrewDBContext.AddEQControlLoopToPlant(Int32 plantID, EQControlLoop loop)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.AddEQControlLoopToUnitInt32String">
            <summary>Sets the shim of BrewDBContext.AddEQControlLoopToUnit(Int32 unitID, String name)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.AddMasterRecipeToPlantInt32Int32">
            <summary>Sets the shim of BrewDBContext.AddMasterRecipeToPlant(Int32 plantID, Int32 masterRecipeID)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.BatchsGet">
            <summary>Sets the shim of BrewDBContext.get_Batchs()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.BatchsSetDbSetOfBatch">
            <summary>Sets the shim of BrewDBContext.set_Batchs(DbSet`1&lt;Batch&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.CollectionOfTestEntitiesGet">
            <summary>Sets the shim of BrewDBContext.get_CollectionOfTestEntities()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.CollectionOfTestEntitiesSetDbSetOfCollectionOfTestEntitie">
            <summary>Sets the shim of BrewDBContext.set_CollectionOfTestEntities(DbSet`1&lt;CollectionOfTestEntitie&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.Constructor">
            <summary>Sets the shim of BrewDBContext.BrewDBContext()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.CreateNewLoopStringStringPlantUnit">
            <summary>Sets the shim of BrewDBContext.CreateNewLoop(String name, String type, Plant plant, Unit unit)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.CreateUnitInt32String">
            <summary>Sets the shim of BrewDBContext.CreateUnit(Int32 PlantID, String unitname)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.EQAddPlantPlant">
            <summary>Sets the shim of BrewDBContext.EQAddPlant(Plant newplant)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.EQAuxilarysGet">
            <summary>Sets the shim of BrewDBContext.get_EQAuxilarys()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.EQAuxilarysSetDbSetOfEQAuxilary">
            <summary>Sets the shim of BrewDBContext.set_EQAuxilarys(DbSet`1&lt;EQAuxilary&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.EQControlLoopsGet">
            <summary>Sets the shim of BrewDBContext.get_EQControlLoops()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.EQControlLoopsSetDbSetOfEQControlLoop">
            <summary>Sets the shim of BrewDBContext.set_EQControlLoops(DbSet`1&lt;EQControlLoop&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.EQTypesGet">
            <summary>Sets the shim of BrewDBContext.get_EQTypes()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.EQTypesSetDbSetOfEQType">
            <summary>Sets the shim of BrewDBContext.set_EQTypes(DbSet`1&lt;EQType&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.EQUnitOperationsGet">
            <summary>Sets the shim of BrewDBContext.get_EQUnitOperations()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.EQUnitOperationsSetDbSetOfEQUnitOperation">
            <summary>Sets the shim of BrewDBContext.set_EQUnitOperations(DbSet`1&lt;EQUnitOperation&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.EQVesselsGet">
            <summary>Sets the shim of BrewDBContext.get_EQVessels()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.EQVesselsSetDbSetOfEQVessel">
            <summary>Sets the shim of BrewDBContext.set_EQVessels(DbSet`1&lt;EQVessel&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.GetEQControlLoopsByPlantByNamePlantString">
            <summary>Sets the shim of BrewDBContext.GetEQControlLoopsByPlantByName(Plant plant, String name)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.GetEQControlLoopsByPlantIDInt32">
            <summary>Sets the shim of BrewDBContext.GetEQControlLoopsByPlantID(Int32 plantID)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.GetEQControlLoopsByPlantPlant">
            <summary>Sets the shim of BrewDBContext.GetEQControlLoopsByPlant(Plant plant)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.GetLoopByPlantIDAndNameInt32String">
            <summary>Sets the shim of BrewDBContext.GetLoopByPlantIDAndName(Int32 PlantID, String EqName)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.GetMasterRecipeByPlantInt32">
            <summary>Sets the shim of BrewDBContext.GetMasterRecipeByPlant(Int32 plantID)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.GetPlantByPlantIDInt32">
            <summary>Sets the shim of BrewDBContext.GetPlantByPlantID(Int32 plantID)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.GetPlantByPlantNameString">
            <summary>Sets the shim of BrewDBContext.GetPlantByPlantName(String plantname)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.GetPlants">
            <summary>Sets the shim of BrewDBContext.GetPlants()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.GetUnitByPlantByNameStringString">
            <summary>Sets the shim of BrewDBContext.GetUnitByPlantByName(String plantname, String unitname)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.GetUnitByPlantByPlantIDInt32String">
            <summary>Sets the shim of BrewDBContext.GetUnitByPlantByPlantID(Int32 plantid, String unitname)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.IngredientTypesGet">
            <summary>Sets the shim of BrewDBContext.get_IngredientTypes()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.IngredientTypesSetDbSetOfIngredientType">
            <summary>Sets the shim of BrewDBContext.set_IngredientTypes(DbSet`1&lt;IngredientType&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.IngredientsGet">
            <summary>Sets the shim of BrewDBContext.get_Ingredients()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.IngredientsSetDbSetOfIngredient">
            <summary>Sets the shim of BrewDBContext.set_Ingredients(DbSet`1&lt;Ingredient&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.MasterRecipesGet">
            <summary>Sets the shim of BrewDBContext.get_MasterRecipes()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.MasterRecipesSetDbSetOfMasterRecipe">
            <summary>Sets the shim of BrewDBContext.set_MasterRecipes(DbSet`1&lt;MasterRecipe&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.OnModelCreatingDbModelBuilder">
            <summary>Sets the shim of BrewDBContext.OnModelCreating(DbModelBuilder modelBuilder)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.PlantsGet">
            <summary>Sets the shim of BrewDBContext.get_Plants()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.PlantsSetDbSetOfPlant">
            <summary>Sets the shim of BrewDBContext.set_Plants(DbSet`1&lt;Plant&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.RecUnitOperationsGet">
            <summary>Sets the shim of BrewDBContext.get_RecUnitOperations()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.RecUnitOperationsSetDbSetOfRecUnitOperation">
            <summary>Sets the shim of BrewDBContext.set_RecUnitOperations(DbSet`1&lt;RecUnitOperation&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.TestEntitieTwosGet">
            <summary>Sets the shim of BrewDBContext.get_TestEntitieTwos()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.TestEntitieTwosSetDbSetOfTestEntitieTwo">
            <summary>Sets the shim of BrewDBContext.set_TestEntitieTwos(DbSet`1&lt;TestEntitieTwo&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.TestEntitiesGet">
            <summary>Sets the shim of BrewDBContext.get_TestEntities()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.TestEntitiesSetDbSetOfTestEntitie">
            <summary>Sets the shim of BrewDBContext.set_TestEntities(DbSet`1&lt;TestEntitie&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.TransitionsGet">
            <summary>Sets the shim of BrewDBContext.get_Transitions()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.TransitionsSetDbSetOfTransition">
            <summary>Sets the shim of BrewDBContext.set_Transitions(DbSet`1&lt;Transition&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.UnitsGet">
            <summary>Sets the shim of BrewDBContext.get_Units()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.UnitsSetDbSetOfUnit">
            <summary>Sets the shim of BrewDBContext.set_Units(DbSet`1&lt;Unit&gt; value)</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.ShimBrewDBContext.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.AllInstances.AddEQControlLoopToPlantInt32EQControlLoop">
            <summary>Sets the shim of BrewDBContext.AddEQControlLoopToPlant(Int32 plantID, EQControlLoop loop)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.AllInstances.AddEQControlLoopToUnitInt32String">
            <summary>Sets the shim of BrewDBContext.AddEQControlLoopToUnit(Int32 unitID, String name)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.AllInstances.AddMasterRecipeToPlantInt32Int32">
            <summary>Sets the shim of BrewDBContext.AddMasterRecipeToPlant(Int32 plantID, Int32 masterRecipeID)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.AllInstances.BatchsGet">
            <summary>Sets the shim of BrewDBContext.get_Batchs()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.AllInstances.BatchsSetDbSetOfBatch">
            <summary>Sets the shim of BrewDBContext.set_Batchs(DbSet`1&lt;Batch&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.AllInstances.CollectionOfTestEntitiesGet">
            <summary>Sets the shim of BrewDBContext.get_CollectionOfTestEntities()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.AllInstances.CollectionOfTestEntitiesSetDbSetOfCollectionOfTestEntitie">
            <summary>Sets the shim of BrewDBContext.set_CollectionOfTestEntities(DbSet`1&lt;CollectionOfTestEntitie&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.AllInstances.CreateNewLoopStringStringPlantUnit">
            <summary>Sets the shim of BrewDBContext.CreateNewLoop(String name, String type, Plant plant, Unit unit)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.AllInstances.CreateUnitInt32String">
            <summary>Sets the shim of BrewDBContext.CreateUnit(Int32 PlantID, String unitname)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.AllInstances.EQAddPlantPlant">
            <summary>Sets the shim of BrewDBContext.EQAddPlant(Plant newplant)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.AllInstances.EQAuxilarysGet">
            <summary>Sets the shim of BrewDBContext.get_EQAuxilarys()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.AllInstances.EQAuxilarysSetDbSetOfEQAuxilary">
            <summary>Sets the shim of BrewDBContext.set_EQAuxilarys(DbSet`1&lt;EQAuxilary&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.AllInstances.EQControlLoopsGet">
            <summary>Sets the shim of BrewDBContext.get_EQControlLoops()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.AllInstances.EQControlLoopsSetDbSetOfEQControlLoop">
            <summary>Sets the shim of BrewDBContext.set_EQControlLoops(DbSet`1&lt;EQControlLoop&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.AllInstances.EQTypesGet">
            <summary>Sets the shim of BrewDBContext.get_EQTypes()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.AllInstances.EQTypesSetDbSetOfEQType">
            <summary>Sets the shim of BrewDBContext.set_EQTypes(DbSet`1&lt;EQType&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.AllInstances.EQUnitOperationsGet">
            <summary>Sets the shim of BrewDBContext.get_EQUnitOperations()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.AllInstances.EQUnitOperationsSetDbSetOfEQUnitOperation">
            <summary>Sets the shim of BrewDBContext.set_EQUnitOperations(DbSet`1&lt;EQUnitOperation&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.AllInstances.EQVesselsGet">
            <summary>Sets the shim of BrewDBContext.get_EQVessels()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.AllInstances.EQVesselsSetDbSetOfEQVessel">
            <summary>Sets the shim of BrewDBContext.set_EQVessels(DbSet`1&lt;EQVessel&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.AllInstances.GetEQControlLoopsByPlantByNamePlantString">
            <summary>Sets the shim of BrewDBContext.GetEQControlLoopsByPlantByName(Plant plant, String name)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.AllInstances.GetEQControlLoopsByPlantIDInt32">
            <summary>Sets the shim of BrewDBContext.GetEQControlLoopsByPlantID(Int32 plantID)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.AllInstances.GetEQControlLoopsByPlantPlant">
            <summary>Sets the shim of BrewDBContext.GetEQControlLoopsByPlant(Plant plant)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.AllInstances.GetLoopByPlantIDAndNameInt32String">
            <summary>Sets the shim of BrewDBContext.GetLoopByPlantIDAndName(Int32 PlantID, String EqName)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.AllInstances.GetMasterRecipeByPlantInt32">
            <summary>Sets the shim of BrewDBContext.GetMasterRecipeByPlant(Int32 plantID)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.AllInstances.GetPlantByPlantIDInt32">
            <summary>Sets the shim of BrewDBContext.GetPlantByPlantID(Int32 plantID)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.AllInstances.GetPlantByPlantNameString">
            <summary>Sets the shim of BrewDBContext.GetPlantByPlantName(String plantname)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.AllInstances.GetPlants">
            <summary>Sets the shim of BrewDBContext.GetPlants()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.AllInstances.GetUnitByPlantByNameStringString">
            <summary>Sets the shim of BrewDBContext.GetUnitByPlantByName(String plantname, String unitname)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.AllInstances.GetUnitByPlantByPlantIDInt32String">
            <summary>Sets the shim of BrewDBContext.GetUnitByPlantByPlantID(Int32 plantid, String unitname)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.AllInstances.IngredientTypesGet">
            <summary>Sets the shim of BrewDBContext.get_IngredientTypes()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.AllInstances.IngredientTypesSetDbSetOfIngredientType">
            <summary>Sets the shim of BrewDBContext.set_IngredientTypes(DbSet`1&lt;IngredientType&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.AllInstances.IngredientsGet">
            <summary>Sets the shim of BrewDBContext.get_Ingredients()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.AllInstances.IngredientsSetDbSetOfIngredient">
            <summary>Sets the shim of BrewDBContext.set_Ingredients(DbSet`1&lt;Ingredient&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.AllInstances.MasterRecipesGet">
            <summary>Sets the shim of BrewDBContext.get_MasterRecipes()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.AllInstances.MasterRecipesSetDbSetOfMasterRecipe">
            <summary>Sets the shim of BrewDBContext.set_MasterRecipes(DbSet`1&lt;MasterRecipe&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.AllInstances.OnModelCreatingDbModelBuilder">
            <summary>Sets the shim of BrewDBContext.OnModelCreating(DbModelBuilder modelBuilder)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.AllInstances.PlantsGet">
            <summary>Sets the shim of BrewDBContext.get_Plants()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.AllInstances.PlantsSetDbSetOfPlant">
            <summary>Sets the shim of BrewDBContext.set_Plants(DbSet`1&lt;Plant&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.AllInstances.RecUnitOperationsGet">
            <summary>Sets the shim of BrewDBContext.get_RecUnitOperations()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.AllInstances.RecUnitOperationsSetDbSetOfRecUnitOperation">
            <summary>Sets the shim of BrewDBContext.set_RecUnitOperations(DbSet`1&lt;RecUnitOperation&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.AllInstances.TestEntitieTwosGet">
            <summary>Sets the shim of BrewDBContext.get_TestEntitieTwos()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.AllInstances.TestEntitieTwosSetDbSetOfTestEntitieTwo">
            <summary>Sets the shim of BrewDBContext.set_TestEntitieTwos(DbSet`1&lt;TestEntitieTwo&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.AllInstances.TestEntitiesGet">
            <summary>Sets the shim of BrewDBContext.get_TestEntities()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.AllInstances.TestEntitiesSetDbSetOfTestEntitie">
            <summary>Sets the shim of BrewDBContext.set_TestEntities(DbSet`1&lt;TestEntitie&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.AllInstances.TransitionsGet">
            <summary>Sets the shim of BrewDBContext.get_Transitions()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.AllInstances.TransitionsSetDbSetOfTransition">
            <summary>Sets the shim of BrewDBContext.set_Transitions(DbSet`1&lt;Transition&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.AllInstances.UnitsGet">
            <summary>Sets the shim of BrewDBContext.get_Units()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewDBContext.AllInstances.UnitsSetDbSetOfUnit">
            <summary>Sets the shim of BrewDBContext.set_Units(DbSet`1&lt;Unit&gt; value)</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.ShimBrewML">
            <summary>Shim type of BrewMLLib.BrewML</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimBrewML.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimBrewML.#ctor(BrewMLLib.BrewML)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimBrewML.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimBrewML.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewML.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimBrewML.Constructor">
            <summary>Sets the shim of BrewML.BrewML()</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.ShimBrewML.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.ShimCollectionOfTestEntitie">
            <summary>Shim type of BrewMLLib.CollectionOfTestEntitie</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimCollectionOfTestEntitie.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimCollectionOfTestEntitie.#ctor(BrewMLLib.CollectionOfTestEntitie)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimCollectionOfTestEntitie.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimCollectionOfTestEntitie.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimCollectionOfTestEntitie.AddEntitieTestEntitie">
            <summary>Sets the shim of CollectionOfTestEntitie.AddEntitie(TestEntitie ent)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimCollectionOfTestEntitie.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimCollectionOfTestEntitie.CollectionOfTestEntitieIDGet">
            <summary>Sets the shim of CollectionOfTestEntitie.get_CollectionOfTestEntitieID()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimCollectionOfTestEntitie.CollectionOfTestEntitieIDSetInt32">
            <summary>Sets the shim of CollectionOfTestEntitie.set_CollectionOfTestEntitieID(Int32 value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimCollectionOfTestEntitie.Constructor">
            <summary>Sets the shim of CollectionOfTestEntitie.CollectionOfTestEntitie()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimCollectionOfTestEntitie.TestEntitieTwosGet">
            <summary>Sets the shim of CollectionOfTestEntitie.get_TestEntitieTwos()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimCollectionOfTestEntitie.TestEntitieTwosSetICollectionOfTestEntitieTwo">
            <summary>Sets the shim of CollectionOfTestEntitie.set_TestEntitieTwos(ICollection`1&lt;TestEntitieTwo&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimCollectionOfTestEntitie.TestEntitiesGet">
            <summary>Sets the shim of CollectionOfTestEntitie.get_TestEntities()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimCollectionOfTestEntitie.TestEntitiesSetICollectionOfTestEntitie">
            <summary>Sets the shim of CollectionOfTestEntitie.set_TestEntities(ICollection`1&lt;TestEntitie&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimCollectionOfTestEntitie.testcolfloatGet">
            <summary>Sets the shim of CollectionOfTestEntitie.get_testcolfloat()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimCollectionOfTestEntitie.testcolfloatSetSingle">
            <summary>Sets the shim of CollectionOfTestEntitie.set_testcolfloat(Single value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimCollectionOfTestEntitie.testcolintGet">
            <summary>Sets the shim of CollectionOfTestEntitie.get_testcolint()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimCollectionOfTestEntitie.testcolintSetInt32">
            <summary>Sets the shim of CollectionOfTestEntitie.set_testcolint(Int32 value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimCollectionOfTestEntitie.testcolstringGet">
            <summary>Sets the shim of CollectionOfTestEntitie.get_testcolstring()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimCollectionOfTestEntitie.testcolstringSetString">
            <summary>Sets the shim of CollectionOfTestEntitie.set_testcolstring(String value)</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.ShimCollectionOfTestEntitie.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimCollectionOfTestEntitie.AllInstances.AddEntitieTestEntitie">
            <summary>Sets the shim of CollectionOfTestEntitie.AddEntitie(TestEntitie ent)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimCollectionOfTestEntitie.AllInstances.CollectionOfTestEntitieIDGet">
            <summary>Sets the shim of CollectionOfTestEntitie.get_CollectionOfTestEntitieID()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimCollectionOfTestEntitie.AllInstances.CollectionOfTestEntitieIDSetInt32">
            <summary>Sets the shim of CollectionOfTestEntitie.set_CollectionOfTestEntitieID(Int32 value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimCollectionOfTestEntitie.AllInstances.TestEntitieTwosGet">
            <summary>Sets the shim of CollectionOfTestEntitie.get_TestEntitieTwos()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimCollectionOfTestEntitie.AllInstances.TestEntitieTwosSetICollectionOfTestEntitieTwo">
            <summary>Sets the shim of CollectionOfTestEntitie.set_TestEntitieTwos(ICollection`1&lt;TestEntitieTwo&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimCollectionOfTestEntitie.AllInstances.TestEntitiesGet">
            <summary>Sets the shim of CollectionOfTestEntitie.get_TestEntities()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimCollectionOfTestEntitie.AllInstances.TestEntitiesSetICollectionOfTestEntitie">
            <summary>Sets the shim of CollectionOfTestEntitie.set_TestEntities(ICollection`1&lt;TestEntitie&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimCollectionOfTestEntitie.AllInstances.testcolfloatGet">
            <summary>Sets the shim of CollectionOfTestEntitie.get_testcolfloat()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimCollectionOfTestEntitie.AllInstances.testcolfloatSetSingle">
            <summary>Sets the shim of CollectionOfTestEntitie.set_testcolfloat(Single value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimCollectionOfTestEntitie.AllInstances.testcolintGet">
            <summary>Sets the shim of CollectionOfTestEntitie.get_testcolint()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimCollectionOfTestEntitie.AllInstances.testcolintSetInt32">
            <summary>Sets the shim of CollectionOfTestEntitie.set_testcolint(Int32 value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimCollectionOfTestEntitie.AllInstances.testcolstringGet">
            <summary>Sets the shim of CollectionOfTestEntitie.get_testcolstring()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimCollectionOfTestEntitie.AllInstances.testcolstringSetString">
            <summary>Sets the shim of CollectionOfTestEntitie.set_testcolstring(String value)</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.ShimEQAuxilary">
            <summary>Shim type of BrewMLLib.EQAuxilary</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimEQAuxilary.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimEQAuxilary.#ctor(BrewMLLib.EQAuxilary)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimEQAuxilary.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimEQAuxilary.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQAuxilary.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQAuxilary.Constructor">
            <summary>Sets the shim of EQAuxilary.EQAuxilary()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQAuxilary.EQTypeGet">
            <summary>Sets the shim of EQAuxilary.get_EQType()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQAuxilary.EQTypeIDGet">
            <summary>Sets the shim of EQAuxilary.get_EQTypeID()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQAuxilary.EQTypeIDSetInt32">
            <summary>Sets the shim of EQAuxilary.set_EQTypeID(Int32 value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQAuxilary.EQTypeSetEQType">
            <summary>Sets the shim of EQAuxilary.set_EQType(EQType value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQAuxilary.OnOffGet">
            <summary>Sets the shim of EQAuxilary.get_OnOff()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQAuxilary.OnOffSetInt32">
            <summary>Sets the shim of EQAuxilary.set_OnOff(Int32 value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQAuxilary.PlantGet">
            <summary>Sets the shim of EQAuxilary.get_Plant()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQAuxilary.PlantIDGet">
            <summary>Sets the shim of EQAuxilary.get_PlantID()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQAuxilary.PlantIDSetInt32">
            <summary>Sets the shim of EQAuxilary.set_PlantID(Int32 value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQAuxilary.PlantSetPlant">
            <summary>Sets the shim of EQAuxilary.set_Plant(Plant value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQAuxilary.RunningGet">
            <summary>Sets the shim of EQAuxilary.get_Running()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQAuxilary.RunningSetInt32">
            <summary>Sets the shim of EQAuxilary.set_Running(Int32 value)</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.ShimEQAuxilary.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQAuxilary.AllInstances.EQTypeGet">
            <summary>Sets the shim of EQAuxilary.get_EQType()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQAuxilary.AllInstances.EQTypeIDGet">
            <summary>Sets the shim of EQAuxilary.get_EQTypeID()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQAuxilary.AllInstances.EQTypeIDSetInt32">
            <summary>Sets the shim of EQAuxilary.set_EQTypeID(Int32 value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQAuxilary.AllInstances.EQTypeSetEQType">
            <summary>Sets the shim of EQAuxilary.set_EQType(EQType value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQAuxilary.AllInstances.OnOffGet">
            <summary>Sets the shim of EQAuxilary.get_OnOff()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQAuxilary.AllInstances.OnOffSetInt32">
            <summary>Sets the shim of EQAuxilary.set_OnOff(Int32 value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQAuxilary.AllInstances.PlantGet">
            <summary>Sets the shim of EQAuxilary.get_Plant()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQAuxilary.AllInstances.PlantIDGet">
            <summary>Sets the shim of EQAuxilary.get_PlantID()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQAuxilary.AllInstances.PlantIDSetInt32">
            <summary>Sets the shim of EQAuxilary.set_PlantID(Int32 value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQAuxilary.AllInstances.PlantSetPlant">
            <summary>Sets the shim of EQAuxilary.set_Plant(Plant value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQAuxilary.AllInstances.RunningGet">
            <summary>Sets the shim of EQAuxilary.get_Running()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQAuxilary.AllInstances.RunningSetInt32">
            <summary>Sets the shim of EQAuxilary.set_Running(Int32 value)</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.ShimEQControlLoop">
            <summary>Shim type of BrewMLLib.EQControlLoop</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimEQControlLoop.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimEQControlLoop.#ctor(BrewMLLib.EQControlLoop)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimEQControlLoop.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimEQControlLoop.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQControlLoop.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQControlLoop.Constructor">
            <summary>Sets the shim of EQControlLoop.EQControlLoop()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQControlLoop.DoSomethingInt32">
            <summary>Sets the shim of EQControlLoop.DoSomething(Int32 blah)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQControlLoop.EQTypeGet">
            <summary>Sets the shim of EQControlLoop.get_EQType()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQControlLoop.EQTypeSetEQType">
            <summary>Sets the shim of EQControlLoop.set_EQType(EQType value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQControlLoop.EnableTrendingGet">
            <summary>Sets the shim of EQControlLoop.get_EnableTrending()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQControlLoop.EnableTrendingSetBoolean">
            <summary>Sets the shim of EQControlLoop.set_EnableTrending(Boolean value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQControlLoop.HIAlarmGet">
            <summary>Sets the shim of EQControlLoop.get_HIAlarm()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQControlLoop.HIAlarmSetNullableOfSingle">
            <summary>Sets the shim of EQControlLoop.set_HIAlarm(Nullable`1&lt;Single&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQControlLoop.HIHIAlarmGet">
            <summary>Sets the shim of EQControlLoop.get_HIHIAlarm()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQControlLoop.HIHIAlarmSetNullableOfSingle">
            <summary>Sets the shim of EQControlLoop.set_HIHIAlarm(Nullable`1&lt;Single&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQControlLoop.LOAlarmGet">
            <summary>Sets the shim of EQControlLoop.get_LOAlarm()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQControlLoop.LOAlarmSetNullableOfSingle">
            <summary>Sets the shim of EQControlLoop.set_LOAlarm(Nullable`1&lt;Single&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQControlLoop.LOLOAlarmGet">
            <summary>Sets the shim of EQControlLoop.get_LOLOAlarm()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQControlLoop.LOLOAlarmSetNullableOfSingle">
            <summary>Sets the shim of EQControlLoop.set_LOLOAlarm(Nullable`1&lt;Single&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQControlLoop.MeasuredValueGet">
            <summary>Sets the shim of EQControlLoop.get_MeasuredValue()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQControlLoop.MeasuredValueSetNullableOfSingle">
            <summary>Sets the shim of EQControlLoop.set_MeasuredValue(Nullable`1&lt;Single&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQControlLoop.OutputGet">
            <summary>Sets the shim of EQControlLoop.get_Output()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQControlLoop.OutputSetNullableOfSingle">
            <summary>Sets the shim of EQControlLoop.set_Output(Nullable`1&lt;Single&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQControlLoop.PlantGet">
            <summary>Sets the shim of EQControlLoop.get_Plant()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQControlLoop.PlantSetPlant">
            <summary>Sets the shim of EQControlLoop.set_Plant(Plant value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQControlLoop.ReverseActingGet">
            <summary>Sets the shim of EQControlLoop.get_ReverseActing()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQControlLoop.ReverseActingSetNullableOfBoolean">
            <summary>Sets the shim of EQControlLoop.set_ReverseActing(Nullable`1&lt;Boolean&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQControlLoop.SetPointGet">
            <summary>Sets the shim of EQControlLoop.get_SetPoint()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQControlLoop.SetPointSetNullableOfSingle">
            <summary>Sets the shim of EQControlLoop.set_SetPoint(Nullable`1&lt;Single&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQControlLoop.SimMeasValueGet">
            <summary>Sets the shim of EQControlLoop.get_SimMeasValue()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQControlLoop.SimMeasValueSetNullableOfSingle">
            <summary>Sets the shim of EQControlLoop.set_SimMeasValue(Nullable`1&lt;Single&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQControlLoop.TagNameGet">
            <summary>Sets the shim of EQControlLoop.get_TagName()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQControlLoop.TagNameSetString">
            <summary>Sets the shim of EQControlLoop.set_TagName(String value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQControlLoop.UnitGet">
            <summary>Sets the shim of EQControlLoop.get_Unit()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQControlLoop.UnitSetUnit">
            <summary>Sets the shim of EQControlLoop.set_Unit(Unit value)</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.ShimEQControlLoop.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQControlLoop.AllInstances.DoSomethingInt32">
            <summary>Sets the shim of EQControlLoop.DoSomething(Int32 blah)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQControlLoop.AllInstances.EQTypeGet">
            <summary>Sets the shim of EQControlLoop.get_EQType()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQControlLoop.AllInstances.EQTypeSetEQType">
            <summary>Sets the shim of EQControlLoop.set_EQType(EQType value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQControlLoop.AllInstances.EnableTrendingGet">
            <summary>Sets the shim of EQControlLoop.get_EnableTrending()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQControlLoop.AllInstances.EnableTrendingSetBoolean">
            <summary>Sets the shim of EQControlLoop.set_EnableTrending(Boolean value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQControlLoop.AllInstances.HIAlarmGet">
            <summary>Sets the shim of EQControlLoop.get_HIAlarm()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQControlLoop.AllInstances.HIAlarmSetNullableOfSingle">
            <summary>Sets the shim of EQControlLoop.set_HIAlarm(Nullable`1&lt;Single&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQControlLoop.AllInstances.HIHIAlarmGet">
            <summary>Sets the shim of EQControlLoop.get_HIHIAlarm()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQControlLoop.AllInstances.HIHIAlarmSetNullableOfSingle">
            <summary>Sets the shim of EQControlLoop.set_HIHIAlarm(Nullable`1&lt;Single&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQControlLoop.AllInstances.LOAlarmGet">
            <summary>Sets the shim of EQControlLoop.get_LOAlarm()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQControlLoop.AllInstances.LOAlarmSetNullableOfSingle">
            <summary>Sets the shim of EQControlLoop.set_LOAlarm(Nullable`1&lt;Single&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQControlLoop.AllInstances.LOLOAlarmGet">
            <summary>Sets the shim of EQControlLoop.get_LOLOAlarm()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQControlLoop.AllInstances.LOLOAlarmSetNullableOfSingle">
            <summary>Sets the shim of EQControlLoop.set_LOLOAlarm(Nullable`1&lt;Single&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQControlLoop.AllInstances.MeasuredValueGet">
            <summary>Sets the shim of EQControlLoop.get_MeasuredValue()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQControlLoop.AllInstances.MeasuredValueSetNullableOfSingle">
            <summary>Sets the shim of EQControlLoop.set_MeasuredValue(Nullable`1&lt;Single&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQControlLoop.AllInstances.OutputGet">
            <summary>Sets the shim of EQControlLoop.get_Output()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQControlLoop.AllInstances.OutputSetNullableOfSingle">
            <summary>Sets the shim of EQControlLoop.set_Output(Nullable`1&lt;Single&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQControlLoop.AllInstances.PlantGet">
            <summary>Sets the shim of EQControlLoop.get_Plant()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQControlLoop.AllInstances.PlantSetPlant">
            <summary>Sets the shim of EQControlLoop.set_Plant(Plant value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQControlLoop.AllInstances.ReverseActingGet">
            <summary>Sets the shim of EQControlLoop.get_ReverseActing()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQControlLoop.AllInstances.ReverseActingSetNullableOfBoolean">
            <summary>Sets the shim of EQControlLoop.set_ReverseActing(Nullable`1&lt;Boolean&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQControlLoop.AllInstances.SetPointGet">
            <summary>Sets the shim of EQControlLoop.get_SetPoint()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQControlLoop.AllInstances.SetPointSetNullableOfSingle">
            <summary>Sets the shim of EQControlLoop.set_SetPoint(Nullable`1&lt;Single&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQControlLoop.AllInstances.SimMeasValueGet">
            <summary>Sets the shim of EQControlLoop.get_SimMeasValue()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQControlLoop.AllInstances.SimMeasValueSetNullableOfSingle">
            <summary>Sets the shim of EQControlLoop.set_SimMeasValue(Nullable`1&lt;Single&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQControlLoop.AllInstances.TagNameGet">
            <summary>Sets the shim of EQControlLoop.get_TagName()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQControlLoop.AllInstances.TagNameSetString">
            <summary>Sets the shim of EQControlLoop.set_TagName(String value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQControlLoop.AllInstances.UnitGet">
            <summary>Sets the shim of EQControlLoop.get_Unit()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQControlLoop.AllInstances.UnitSetUnit">
            <summary>Sets the shim of EQControlLoop.set_Unit(Unit value)</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.ShimEQType">
            <summary>Shim type of BrewMLLib.EQType</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimEQType.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimEQType.#ctor(BrewMLLib.EQType)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimEQType.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimEQType.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQType.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQType.Constructor">
            <summary>Sets the shim of EQType.EQType()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQType.EQTypeIDGet">
            <summary>Sets the shim of EQType.get_EQTypeID()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQType.EQTypeIDSetInt32">
            <summary>Sets the shim of EQType.set_EQTypeID(Int32 value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQType.TypeDescriptionGet">
            <summary>Sets the shim of EQType.get_TypeDescription()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQType.TypeDescriptionSetString">
            <summary>Sets the shim of EQType.set_TypeDescription(String value)</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.ShimEQType.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQType.AllInstances.EQTypeIDGet">
            <summary>Sets the shim of EQType.get_EQTypeID()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQType.AllInstances.EQTypeIDSetInt32">
            <summary>Sets the shim of EQType.set_EQTypeID(Int32 value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQType.AllInstances.TypeDescriptionGet">
            <summary>Sets the shim of EQType.get_TypeDescription()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQType.AllInstances.TypeDescriptionSetString">
            <summary>Sets the shim of EQType.set_TypeDescription(String value)</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.ShimEQUnitOperation">
            <summary>Shim type of BrewMLLib.EQUnitOperation</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimEQUnitOperation.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimEQUnitOperation.#ctor(BrewMLLib.EQUnitOperation)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimEQUnitOperation.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimEQUnitOperation.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQUnitOperation.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQUnitOperation.Constructor">
            <summary>Sets the shim of EQUnitOperation.EQUnitOperation()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQUnitOperation.NameOfOperationGet">
            <summary>Sets the shim of EQUnitOperation.get_NameOfOperation()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQUnitOperation.NameOfOperationSetString">
            <summary>Sets the shim of EQUnitOperation.set_NameOfOperation(String value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQUnitOperation.UnitOperationIDGet">
            <summary>Sets the shim of EQUnitOperation.get_UnitOperationID()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQUnitOperation.UnitOperationIDSetInt32">
            <summary>Sets the shim of EQUnitOperation.set_UnitOperationID(Int32 value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQUnitOperation.UnitsThisOperationCanRunOnGet">
            <summary>Sets the shim of EQUnitOperation.get_UnitsThisOperationCanRunOn()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQUnitOperation.UnitsThisOperationCanRunOnSetICollectionOfUnit">
            <summary>Sets the shim of EQUnitOperation.set_UnitsThisOperationCanRunOn(ICollection`1&lt;Unit&gt; value)</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.ShimEQUnitOperation.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQUnitOperation.AllInstances.NameOfOperationGet">
            <summary>Sets the shim of EQUnitOperation.get_NameOfOperation()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQUnitOperation.AllInstances.NameOfOperationSetString">
            <summary>Sets the shim of EQUnitOperation.set_NameOfOperation(String value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQUnitOperation.AllInstances.UnitOperationIDGet">
            <summary>Sets the shim of EQUnitOperation.get_UnitOperationID()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQUnitOperation.AllInstances.UnitOperationIDSetInt32">
            <summary>Sets the shim of EQUnitOperation.set_UnitOperationID(Int32 value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQUnitOperation.AllInstances.UnitsThisOperationCanRunOnGet">
            <summary>Sets the shim of EQUnitOperation.get_UnitsThisOperationCanRunOn()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQUnitOperation.AllInstances.UnitsThisOperationCanRunOnSetICollectionOfUnit">
            <summary>Sets the shim of EQUnitOperation.set_UnitsThisOperationCanRunOn(ICollection`1&lt;Unit&gt; value)</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.ShimEQVessel">
            <summary>Shim type of BrewMLLib.EQVessel</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimEQVessel.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimEQVessel.#ctor(BrewMLLib.EQVessel)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimEQVessel.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimEQVessel.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQVessel.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQVessel.Constructor">
            <summary>Sets the shim of EQVessel.EQVessel()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQVessel.EQTypeGet">
            <summary>Sets the shim of EQVessel.get_EQType()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQVessel.EQTypeIDGet">
            <summary>Sets the shim of EQVessel.get_EQTypeID()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQVessel.EQTypeIDSetInt32">
            <summary>Sets the shim of EQVessel.set_EQTypeID(Int32 value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQVessel.EQTypeSetEQType">
            <summary>Sets the shim of EQVessel.set_EQType(EQType value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQVessel.MaxTempGet">
            <summary>Sets the shim of EQVessel.get_MaxTemp()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQVessel.MaxTempSetSingle">
            <summary>Sets the shim of EQVessel.set_MaxTemp(Single value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQVessel.MaxVolumeGet">
            <summary>Sets the shim of EQVessel.get_MaxVolume()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQVessel.MaxVolumeSetSingle">
            <summary>Sets the shim of EQVessel.set_MaxVolume(Single value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQVessel.MinVolumeGet">
            <summary>Sets the shim of EQVessel.get_MinVolume()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQVessel.MinVolumeSetSingle">
            <summary>Sets the shim of EQVessel.set_MinVolume(Single value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQVessel.NameGet">
            <summary>Sets the shim of EQVessel.get_Name()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQVessel.NameSetString">
            <summary>Sets the shim of EQVessel.set_Name(String value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQVessel.PlantGet">
            <summary>Sets the shim of EQVessel.get_Plant()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQVessel.PlantIDGet">
            <summary>Sets the shim of EQVessel.get_PlantID()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQVessel.PlantIDSetInt32">
            <summary>Sets the shim of EQVessel.set_PlantID(Int32 value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQVessel.PlantSetPlant">
            <summary>Sets the shim of EQVessel.set_Plant(Plant value)</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.ShimEQVessel.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQVessel.AllInstances.EQTypeGet">
            <summary>Sets the shim of EQVessel.get_EQType()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQVessel.AllInstances.EQTypeIDGet">
            <summary>Sets the shim of EQVessel.get_EQTypeID()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQVessel.AllInstances.EQTypeIDSetInt32">
            <summary>Sets the shim of EQVessel.set_EQTypeID(Int32 value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQVessel.AllInstances.EQTypeSetEQType">
            <summary>Sets the shim of EQVessel.set_EQType(EQType value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQVessel.AllInstances.MaxTempGet">
            <summary>Sets the shim of EQVessel.get_MaxTemp()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQVessel.AllInstances.MaxTempSetSingle">
            <summary>Sets the shim of EQVessel.set_MaxTemp(Single value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQVessel.AllInstances.MaxVolumeGet">
            <summary>Sets the shim of EQVessel.get_MaxVolume()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQVessel.AllInstances.MaxVolumeSetSingle">
            <summary>Sets the shim of EQVessel.set_MaxVolume(Single value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQVessel.AllInstances.MinVolumeGet">
            <summary>Sets the shim of EQVessel.get_MinVolume()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQVessel.AllInstances.MinVolumeSetSingle">
            <summary>Sets the shim of EQVessel.set_MinVolume(Single value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQVessel.AllInstances.NameGet">
            <summary>Sets the shim of EQVessel.get_Name()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQVessel.AllInstances.NameSetString">
            <summary>Sets the shim of EQVessel.set_Name(String value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQVessel.AllInstances.PlantGet">
            <summary>Sets the shim of EQVessel.get_Plant()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQVessel.AllInstances.PlantIDGet">
            <summary>Sets the shim of EQVessel.get_PlantID()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQVessel.AllInstances.PlantIDSetInt32">
            <summary>Sets the shim of EQVessel.set_PlantID(Int32 value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimEQVessel.AllInstances.PlantSetPlant">
            <summary>Sets the shim of EQVessel.set_Plant(Plant value)</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.ShimFluentControlLoop">
            <summary>Shim type of BrewMLLib.FluentControlLoop</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimFluentControlLoop.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimFluentControlLoop.#ctor(BrewMLLib.FluentControlLoop)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimFluentControlLoop.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimFluentControlLoop.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimFluentControlLoop.Bind(BrewMLLib.IFluentControlLoop)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentControlLoop.AddControlLoopStringString">
            <summary>Sets the shim of FluentControlLoop.AddControlLoop(String name, String type)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentControlLoop.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentControlLoop.ConstructorPlant">
            <summary>Sets the shim of FluentControlLoop.FluentControlLoop(Plant parent)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentControlLoop.ConstructorPlantString">
            <summary>Sets the shim of FluentControlLoop.FluentControlLoop(Plant plant, String name)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentControlLoop.ConstructorUnitPlant">
            <summary>Sets the shim of FluentControlLoop.FluentControlLoop(Unit parentunit, Plant parentplant)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentControlLoop.ForControlLoopString">
            <summary>Sets the shim of FluentControlLoop.ForControlLoop(String s)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentControlLoop.GetMessage">
            <summary>Sets the shim of FluentControlLoop.GetMessage()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentControlLoop.GetSetPoint">
            <summary>Sets the shim of FluentControlLoop.GetSetPoint()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentControlLoop.HasTypeString">
            <summary>Sets the shim of FluentControlLoop.HasType(String name)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentControlLoop.SetSetPointSingle">
            <summary>Sets the shim of FluentControlLoop.SetSetPoint(Single sp)</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.ShimFluentControlLoop.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentControlLoop.AllInstances.AddControlLoopStringString">
            <summary>Sets the shim of FluentControlLoop.AddControlLoop(String name, String type)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentControlLoop.AllInstances.ForControlLoopString">
            <summary>Sets the shim of FluentControlLoop.ForControlLoop(String s)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentControlLoop.AllInstances.GetMessage">
            <summary>Sets the shim of FluentControlLoop.GetMessage()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentControlLoop.AllInstances.GetSetPoint">
            <summary>Sets the shim of FluentControlLoop.GetSetPoint()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentControlLoop.AllInstances.HasTypeString">
            <summary>Sets the shim of FluentControlLoop.HasType(String name)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentControlLoop.AllInstances.SetSetPointSingle">
            <summary>Sets the shim of FluentControlLoop.SetSetPoint(Single sp)</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.ShimFluentEQType">
            <summary>Shim type of BrewMLLib.FluentEQType</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimFluentEQType.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimFluentEQType.#ctor(BrewMLLib.FluentEQType)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimFluentEQType.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimFluentEQType.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimFluentEQType.Bind(BrewMLLib.IFluentEQType)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentEQType.AddEQTypeString">
            <summary>Sets the shim of FluentEQType.AddEQType(String s)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentEQType.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentEQType.Constructor">
            <summary>Sets the shim of FluentEQType.FluentEQType()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentEQType.ForEQTypeString">
            <summary>Sets the shim of FluentEQType.ForEQType(String s)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentEQType.GetEQTypeString">
            <summary>Sets the shim of FluentEQType.GetEQType(String s)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentEQType.GetMessage">
            <summary>Sets the shim of FluentEQType.GetMessage()</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.ShimFluentEQType.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentEQType.AllInstances.AddEQTypeString">
            <summary>Sets the shim of FluentEQType.AddEQType(String s)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentEQType.AllInstances.ForEQTypeString">
            <summary>Sets the shim of FluentEQType.ForEQType(String s)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentEQType.AllInstances.GetEQTypeString">
            <summary>Sets the shim of FluentEQType.GetEQType(String s)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentEQType.AllInstances.GetMessage">
            <summary>Sets the shim of FluentEQType.GetMessage()</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.ShimFluentPlant">
            <summary>Shim type of BrewMLLib.FluentPlant</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimFluentPlant.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimFluentPlant.#ctor(BrewMLLib.FluentPlant)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimFluentPlant.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimFluentPlant.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimFluentPlant.Bind(BrewMLLib.IFluentPlant)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentPlant.AddPlantString">
            <summary>Sets the shim of FluentPlant.AddPlant(String name)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentPlant.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentPlant.Constructor">
            <summary>Sets the shim of FluentPlant.FluentPlant()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentPlant.ForPlantString">
            <summary>Sets the shim of FluentPlant.ForPlant(String name)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentPlant.GetMessage">
            <summary>Sets the shim of FluentPlant.GetMessage()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentPlant.GetPlant">
            <summary>Sets the shim of FluentPlant.GetPlant()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentPlant.HasLoops">
            <summary>Sets the shim of FluentPlant.HasLoops()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentPlant.HasLoopsString">
            <summary>Sets the shim of FluentPlant.HasLoops(String name)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentPlant.HasUnits">
            <summary>Sets the shim of FluentPlant.HasUnits()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentPlant.HasUnitsString">
            <summary>Sets the shim of FluentPlant.HasUnits(String unitname)</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.ShimFluentPlant.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentPlant.AllInstances.AddPlantString">
            <summary>Sets the shim of FluentPlant.AddPlant(String name)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentPlant.AllInstances.ForPlantString">
            <summary>Sets the shim of FluentPlant.ForPlant(String name)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentPlant.AllInstances.GetMessage">
            <summary>Sets the shim of FluentPlant.GetMessage()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentPlant.AllInstances.GetPlant">
            <summary>Sets the shim of FluentPlant.GetPlant()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentPlant.AllInstances.HasLoops">
            <summary>Sets the shim of FluentPlant.HasLoops()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentPlant.AllInstances.HasLoopsString">
            <summary>Sets the shim of FluentPlant.HasLoops(String name)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentPlant.AllInstances.HasUnits">
            <summary>Sets the shim of FluentPlant.HasUnits()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentPlant.AllInstances.HasUnitsString">
            <summary>Sets the shim of FluentPlant.HasUnits(String unitname)</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.ShimFluentRecipe">
            <summary>Shim type of BrewMLLib.FluentRecipe</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimFluentRecipe.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimFluentRecipe.#ctor(BrewMLLib.FluentRecipe)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimFluentRecipe.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimFluentRecipe.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimFluentRecipe.Bind(BrewMLLib.IFluentRecipe)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentRecipe.AddRecipeString">
            <summary>Sets the shim of FluentRecipe.AddRecipe(String s)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentRecipe.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentRecipe.Constructor">
            <summary>Sets the shim of FluentRecipe.FluentRecipe()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentRecipe.Final">
            <summary>Sets the shim of FluentRecipe.Final()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentRecipe.ForRecipeString">
            <summary>Sets the shim of FluentRecipe.ForRecipe(String s)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentRecipe.GetRecipe">
            <summary>Sets the shim of FluentRecipe.GetRecipe()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentRecipe.HasIngredientsStringSingle">
            <summary>Sets the shim of FluentRecipe.HasIngredients(String s, Single amount)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentRecipe.HasRecOperations">
            <summary>Sets the shim of FluentRecipe.HasRecOperations()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentRecipe.HasRecOperationsString">
            <summary>Sets the shim of FluentRecipe.HasRecOperations(String s)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentRecipe.SetBrandDescriptionString">
            <summary>Sets the shim of FluentRecipe.SetBrandDescription(String s)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentRecipe.SetBrandNameString">
            <summary>Sets the shim of FluentRecipe.SetBrandName(String s)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentRecipe.SetQualityTargetString">
            <summary>Sets the shim of FluentRecipe.SetQualityTarget(String s)</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.ShimFluentRecipe.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentRecipe.AllInstances.AddRecipeString">
            <summary>Sets the shim of FluentRecipe.AddRecipe(String s)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentRecipe.AllInstances.Final">
            <summary>Sets the shim of FluentRecipe.Final()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentRecipe.AllInstances.ForRecipeString">
            <summary>Sets the shim of FluentRecipe.ForRecipe(String s)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentRecipe.AllInstances.GetRecipe">
            <summary>Sets the shim of FluentRecipe.GetRecipe()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentRecipe.AllInstances.HasIngredientsStringSingle">
            <summary>Sets the shim of FluentRecipe.HasIngredients(String s, Single amount)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentRecipe.AllInstances.HasRecOperations">
            <summary>Sets the shim of FluentRecipe.HasRecOperations()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentRecipe.AllInstances.HasRecOperationsString">
            <summary>Sets the shim of FluentRecipe.HasRecOperations(String s)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentRecipe.AllInstances.SetBrandDescriptionString">
            <summary>Sets the shim of FluentRecipe.SetBrandDescription(String s)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentRecipe.AllInstances.SetBrandNameString">
            <summary>Sets the shim of FluentRecipe.SetBrandName(String s)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentRecipe.AllInstances.SetQualityTargetString">
            <summary>Sets the shim of FluentRecipe.SetQualityTarget(String s)</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.ShimFluentRecipeOperations">
            <summary>Shim type of BrewMLLib.FluentRecipeOperations</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimFluentRecipeOperations.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimFluentRecipeOperations.#ctor(BrewMLLib.FluentRecipeOperations)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimFluentRecipeOperations.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimFluentRecipeOperations.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimFluentRecipeOperations.Bind(BrewMLLib.IFluentRecipeOperations)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentRecipeOperations.AddOperationString">
            <summary>Sets the shim of FluentRecipeOperations.AddOperation(String s)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentRecipeOperations.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentRecipeOperations.ConstructorIFluentRecipe">
            <summary>Sets the shim of FluentRecipeOperations.FluentRecipeOperations(IFluentRecipe parent)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentRecipeOperations.ConstructorIFluentRecipeString">
            <summary>Sets the shim of FluentRecipeOperations.FluentRecipeOperations(IFluentRecipe parent, String s)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentRecipeOperations.ForOperationString">
            <summary>Sets the shim of FluentRecipeOperations.ForOperation(String s)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentRecipeOperations.GetRecUnitOperation">
            <summary>Sets the shim of FluentRecipeOperations.GetRecUnitOperation()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentRecipeOperations.HasAllowedUnits">
            <summary>Sets the shim of FluentRecipeOperations.HasAllowedUnits()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentRecipeOperations.HasTransitions">
            <summary>Sets the shim of FluentRecipeOperations.HasTransitions()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentRecipeOperations.SetSetPointSingle">
            <summary>Sets the shim of FluentRecipeOperations.SetSetPoint(Single f)</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.ShimFluentRecipeOperations.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentRecipeOperations.AllInstances.AddOperationString">
            <summary>Sets the shim of FluentRecipeOperations.AddOperation(String s)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentRecipeOperations.AllInstances.ForOperationString">
            <summary>Sets the shim of FluentRecipeOperations.ForOperation(String s)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentRecipeOperations.AllInstances.GetRecUnitOperation">
            <summary>Sets the shim of FluentRecipeOperations.GetRecUnitOperation()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentRecipeOperations.AllInstances.HasAllowedUnits">
            <summary>Sets the shim of FluentRecipeOperations.HasAllowedUnits()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentRecipeOperations.AllInstances.HasTransitions">
            <summary>Sets the shim of FluentRecipeOperations.HasTransitions()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentRecipeOperations.AllInstances.SetSetPointSingle">
            <summary>Sets the shim of FluentRecipeOperations.SetSetPoint(Single f)</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.ShimFluentTransition">
            <summary>Shim type of BrewMLLib.FluentTransition</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimFluentTransition.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimFluentTransition.#ctor(BrewMLLib.FluentTransition)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimFluentTransition.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimFluentTransition.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimFluentTransition.Bind(BrewMLLib.IFluentTransitions)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentTransition.AddTranstionStringStringOperantsSingle">
            <summary>Sets the shim of FluentTransition.AddTranstion(String s, String loopname, Operants op, Single SetPoint)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentTransition.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentTransition.Constructor">
            <summary>Sets the shim of FluentTransition.FluentTransition()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentTransition.ConstructorIFluentRecipeOperations">
            <summary>Sets the shim of FluentTransition.FluentTransition(IFluentRecipeOperations parent)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentTransition.ForTranstionString">
            <summary>Sets the shim of FluentTransition.ForTranstion(String s)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentTransition.GetTranstion">
            <summary>Sets the shim of FluentTransition.GetTranstion()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentTransition.HasLoopString">
            <summary>Sets the shim of FluentTransition.HasLoop(String s)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentTransition.SetNameString">
            <summary>Sets the shim of FluentTransition.SetName(String s)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentTransition.SetOperantOperants">
            <summary>Sets the shim of FluentTransition.SetOperant(Operants o)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentTransition.SetTimeInt32">
            <summary>Sets the shim of FluentTransition.SetTime(Int32 i)</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.ShimFluentTransition.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentTransition.AllInstances.AddTranstionStringStringOperantsSingle">
            <summary>Sets the shim of FluentTransition.AddTranstion(String s, String loopname, Operants op, Single SetPoint)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentTransition.AllInstances.ForTranstionString">
            <summary>Sets the shim of FluentTransition.ForTranstion(String s)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentTransition.AllInstances.GetTranstion">
            <summary>Sets the shim of FluentTransition.GetTranstion()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentTransition.AllInstances.HasLoopString">
            <summary>Sets the shim of FluentTransition.HasLoop(String s)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentTransition.AllInstances.SetNameString">
            <summary>Sets the shim of FluentTransition.SetName(String s)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentTransition.AllInstances.SetOperantOperants">
            <summary>Sets the shim of FluentTransition.SetOperant(Operants o)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentTransition.AllInstances.SetTimeInt32">
            <summary>Sets the shim of FluentTransition.SetTime(Int32 i)</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.ShimFluentUnit">
            <summary>Shim type of BrewMLLib.FluentUnit</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimFluentUnit.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimFluentUnit.#ctor(BrewMLLib.FluentUnit)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimFluentUnit.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimFluentUnit.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimFluentUnit.Bind(BrewMLLib.IFluentUnit)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentUnit.AddUnitString">
            <summary>Sets the shim of FluentUnit.AddUnit(String UnitName)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentUnit.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentUnit.Constructor">
            <summary>Sets the shim of FluentUnit.FluentUnit()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentUnit.ConstructorPlant">
            <summary>Sets the shim of FluentUnit.FluentUnit(Plant plant)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentUnit.ConstructorPlantString">
            <summary>Sets the shim of FluentUnit.FluentUnit(Plant plant, String unitname)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentUnit.ForUnitString">
            <summary>Sets the shim of FluentUnit.ForUnit(String unitname)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentUnit.GetPlant">
            <summary>Sets the shim of FluentUnit.GetPlant()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentUnit.GetUnit">
            <summary>Sets the shim of FluentUnit.GetUnit()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentUnit.HasAvailableOperations">
            <summary>Sets the shim of FluentUnit.HasAvailableOperations()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentUnit.HasCurrentEQOperation">
            <summary>Sets the shim of FluentUnit.HasCurrentEQOperation()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentUnit.HasLoops">
            <summary>Sets the shim of FluentUnit.HasLoops()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentUnit.SetUnitNameString">
            <summary>Sets the shim of FluentUnit.SetUnitName(String Name)</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.ShimFluentUnit.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentUnit.AllInstances.AddUnitString">
            <summary>Sets the shim of FluentUnit.AddUnit(String UnitName)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentUnit.AllInstances.ForUnitString">
            <summary>Sets the shim of FluentUnit.ForUnit(String unitname)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentUnit.AllInstances.GetPlant">
            <summary>Sets the shim of FluentUnit.GetPlant()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentUnit.AllInstances.GetUnit">
            <summary>Sets the shim of FluentUnit.GetUnit()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentUnit.AllInstances.HasAvailableOperations">
            <summary>Sets the shim of FluentUnit.HasAvailableOperations()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentUnit.AllInstances.HasCurrentEQOperation">
            <summary>Sets the shim of FluentUnit.HasCurrentEQOperation()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentUnit.AllInstances.HasLoops">
            <summary>Sets the shim of FluentUnit.HasLoops()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimFluentUnit.AllInstances.SetUnitNameString">
            <summary>Sets the shim of FluentUnit.SetUnitName(String Name)</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.ShimIngredient">
            <summary>Shim type of BrewMLLib.Ingredient</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimIngredient.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimIngredient.#ctor(BrewMLLib.Ingredient)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimIngredient.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimIngredient.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimIngredient.AmountActuallyRecievedGet">
            <summary>Sets the shim of Ingredient.get_AmountActuallyRecieved()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimIngredient.AmountActuallyRecievedSetNullableOfInt32">
            <summary>Sets the shim of Ingredient.set_AmountActuallyRecieved(Nullable`1&lt;Int32&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimIngredient.AmountNeededGet">
            <summary>Sets the shim of Ingredient.get_AmountNeeded()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimIngredient.AmountNeededSetInt32">
            <summary>Sets the shim of Ingredient.set_AmountNeeded(Int32 value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimIngredient.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimIngredient.Constructor">
            <summary>Sets the shim of Ingredient.Ingredient()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimIngredient.IngredientIDGet">
            <summary>Sets the shim of Ingredient.get_IngredientID()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimIngredient.IngredientIDSetInt32">
            <summary>Sets the shim of Ingredient.set_IngredientID(Int32 value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimIngredient.IngredientTypeGet">
            <summary>Sets the shim of Ingredient.get_IngredientType()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimIngredient.IngredientTypeIDGet">
            <summary>Sets the shim of Ingredient.get_IngredientTypeID()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimIngredient.IngredientTypeIDSetInt32">
            <summary>Sets the shim of Ingredient.set_IngredientTypeID(Int32 value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimIngredient.IngredientTypeSetIngredientType">
            <summary>Sets the shim of Ingredient.set_IngredientType(IngredientType value)</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.ShimIngredient.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimIngredient.AllInstances.AmountActuallyRecievedGet">
            <summary>Sets the shim of Ingredient.get_AmountActuallyRecieved()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimIngredient.AllInstances.AmountActuallyRecievedSetNullableOfInt32">
            <summary>Sets the shim of Ingredient.set_AmountActuallyRecieved(Nullable`1&lt;Int32&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimIngredient.AllInstances.AmountNeededGet">
            <summary>Sets the shim of Ingredient.get_AmountNeeded()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimIngredient.AllInstances.AmountNeededSetInt32">
            <summary>Sets the shim of Ingredient.set_AmountNeeded(Int32 value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimIngredient.AllInstances.IngredientIDGet">
            <summary>Sets the shim of Ingredient.get_IngredientID()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimIngredient.AllInstances.IngredientIDSetInt32">
            <summary>Sets the shim of Ingredient.set_IngredientID(Int32 value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimIngredient.AllInstances.IngredientTypeGet">
            <summary>Sets the shim of Ingredient.get_IngredientType()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimIngredient.AllInstances.IngredientTypeIDGet">
            <summary>Sets the shim of Ingredient.get_IngredientTypeID()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimIngredient.AllInstances.IngredientTypeIDSetInt32">
            <summary>Sets the shim of Ingredient.set_IngredientTypeID(Int32 value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimIngredient.AllInstances.IngredientTypeSetIngredientType">
            <summary>Sets the shim of Ingredient.set_IngredientType(IngredientType value)</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.ShimIngredientType">
            <summary>Shim type of BrewMLLib.IngredientType</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimIngredientType.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimIngredientType.#ctor(BrewMLLib.IngredientType)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimIngredientType.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimIngredientType.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimIngredientType.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimIngredientType.Constructor">
            <summary>Sets the shim of IngredientType.IngredientType()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimIngredientType.CostGet">
            <summary>Sets the shim of IngredientType.get_Cost()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimIngredientType.CostSetInt32">
            <summary>Sets the shim of IngredientType.set_Cost(Int32 value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimIngredientType.DescriptionGet">
            <summary>Sets the shim of IngredientType.get_Description()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimIngredientType.DescriptionSetString">
            <summary>Sets the shim of IngredientType.set_Description(String value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimIngredientType.FinancialSystemCodeGet">
            <summary>Sets the shim of IngredientType.get_FinancialSystemCode()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimIngredientType.FinancialSystemCodeSetInt32">
            <summary>Sets the shim of IngredientType.set_FinancialSystemCode(Int32 value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimIngredientType.IngredientTypeIDGet">
            <summary>Sets the shim of IngredientType.get_IngredientTypeID()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimIngredientType.IngredientTypeIDSetInt32">
            <summary>Sets the shim of IngredientType.set_IngredientTypeID(Int32 value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimIngredientType.NameGet">
            <summary>Sets the shim of IngredientType.get_Name()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimIngredientType.NameSetString">
            <summary>Sets the shim of IngredientType.set_Name(String value)</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.ShimIngredientType.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimIngredientType.AllInstances.CostGet">
            <summary>Sets the shim of IngredientType.get_Cost()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimIngredientType.AllInstances.CostSetInt32">
            <summary>Sets the shim of IngredientType.set_Cost(Int32 value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimIngredientType.AllInstances.DescriptionGet">
            <summary>Sets the shim of IngredientType.get_Description()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimIngredientType.AllInstances.DescriptionSetString">
            <summary>Sets the shim of IngredientType.set_Description(String value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimIngredientType.AllInstances.FinancialSystemCodeGet">
            <summary>Sets the shim of IngredientType.get_FinancialSystemCode()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimIngredientType.AllInstances.FinancialSystemCodeSetInt32">
            <summary>Sets the shim of IngredientType.set_FinancialSystemCode(Int32 value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimIngredientType.AllInstances.IngredientTypeIDGet">
            <summary>Sets the shim of IngredientType.get_IngredientTypeID()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimIngredientType.AllInstances.IngredientTypeIDSetInt32">
            <summary>Sets the shim of IngredientType.set_IngredientTypeID(Int32 value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimIngredientType.AllInstances.NameGet">
            <summary>Sets the shim of IngredientType.get_Name()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimIngredientType.AllInstances.NameSetString">
            <summary>Sets the shim of IngredientType.set_Name(String value)</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.ShimMasterRecipe">
            <summary>Shim type of BrewMLLib.MasterRecipe</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimMasterRecipe.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimMasterRecipe.#ctor(BrewMLLib.MasterRecipe)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimMasterRecipe.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimMasterRecipe.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimMasterRecipe.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimMasterRecipe.BrandDescriptionGet">
            <summary>Sets the shim of MasterRecipe.get_BrandDescription()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimMasterRecipe.BrandDescriptionSetString">
            <summary>Sets the shim of MasterRecipe.set_BrandDescription(String value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimMasterRecipe.BrandNameGet">
            <summary>Sets the shim of MasterRecipe.get_BrandName()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimMasterRecipe.BrandNameSetString">
            <summary>Sets the shim of MasterRecipe.set_BrandName(String value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimMasterRecipe.Constructor">
            <summary>Sets the shim of MasterRecipe.MasterRecipe()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimMasterRecipe.IngredientsGet">
            <summary>Sets the shim of MasterRecipe.get_Ingredients()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimMasterRecipe.IngredientsSetICollectionOfIngredient">
            <summary>Sets the shim of MasterRecipe.set_Ingredients(ICollection`1&lt;Ingredient&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimMasterRecipe.MasterRecipeIDGet">
            <summary>Sets the shim of MasterRecipe.get_MasterRecipeID()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimMasterRecipe.MasterRecipeIDSetInt32">
            <summary>Sets the shim of MasterRecipe.set_MasterRecipeID(Int32 value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimMasterRecipe.PlantsGet">
            <summary>Sets the shim of MasterRecipe.get_Plants()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimMasterRecipe.PlantsSetICollectionOfPlant">
            <summary>Sets the shim of MasterRecipe.set_Plants(ICollection`1&lt;Plant&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimMasterRecipe.QaulityTargetsGet">
            <summary>Sets the shim of MasterRecipe.get_QaulityTargets()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimMasterRecipe.QaulityTargetsSetString">
            <summary>Sets the shim of MasterRecipe.set_QaulityTargets(String value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimMasterRecipe.RecOperationsGet">
            <summary>Sets the shim of MasterRecipe.get_RecOperations()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimMasterRecipe.RecOperationsSetICollectionOfRecUnitOperation">
            <summary>Sets the shim of MasterRecipe.set_RecOperations(ICollection`1&lt;RecUnitOperation&gt; value)</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.ShimMasterRecipe.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimMasterRecipe.AllInstances.BrandDescriptionGet">
            <summary>Sets the shim of MasterRecipe.get_BrandDescription()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimMasterRecipe.AllInstances.BrandDescriptionSetString">
            <summary>Sets the shim of MasterRecipe.set_BrandDescription(String value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimMasterRecipe.AllInstances.BrandNameGet">
            <summary>Sets the shim of MasterRecipe.get_BrandName()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimMasterRecipe.AllInstances.BrandNameSetString">
            <summary>Sets the shim of MasterRecipe.set_BrandName(String value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimMasterRecipe.AllInstances.IngredientsGet">
            <summary>Sets the shim of MasterRecipe.get_Ingredients()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimMasterRecipe.AllInstances.IngredientsSetICollectionOfIngredient">
            <summary>Sets the shim of MasterRecipe.set_Ingredients(ICollection`1&lt;Ingredient&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimMasterRecipe.AllInstances.MasterRecipeIDGet">
            <summary>Sets the shim of MasterRecipe.get_MasterRecipeID()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimMasterRecipe.AllInstances.MasterRecipeIDSetInt32">
            <summary>Sets the shim of MasterRecipe.set_MasterRecipeID(Int32 value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimMasterRecipe.AllInstances.PlantsGet">
            <summary>Sets the shim of MasterRecipe.get_Plants()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimMasterRecipe.AllInstances.PlantsSetICollectionOfPlant">
            <summary>Sets the shim of MasterRecipe.set_Plants(ICollection`1&lt;Plant&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimMasterRecipe.AllInstances.QaulityTargetsGet">
            <summary>Sets the shim of MasterRecipe.get_QaulityTargets()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimMasterRecipe.AllInstances.QaulityTargetsSetString">
            <summary>Sets the shim of MasterRecipe.set_QaulityTargets(String value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimMasterRecipe.AllInstances.RecOperationsGet">
            <summary>Sets the shim of MasterRecipe.get_RecOperations()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimMasterRecipe.AllInstances.RecOperationsSetICollectionOfRecUnitOperation">
            <summary>Sets the shim of MasterRecipe.set_RecOperations(ICollection`1&lt;RecUnitOperation&gt; value)</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.ShimPlant">
            <summary>Shim type of BrewMLLib.Plant</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimPlant.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimPlant.#ctor(BrewMLLib.Plant)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimPlant.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimPlant.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimPlant.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimPlant.BrewPubMenuGet">
            <summary>Sets the shim of Plant.get_BrewPubMenu()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimPlant.BrewPubMenuSetString">
            <summary>Sets the shim of Plant.set_BrewPubMenu(String value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimPlant.Constructor">
            <summary>Sets the shim of Plant.Plant()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimPlant.PlantAddressGet">
            <summary>Sets the shim of Plant.get_PlantAddress()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimPlant.PlantAddressSetString">
            <summary>Sets the shim of Plant.set_PlantAddress(String value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimPlant.PlantAuxGet">
            <summary>Sets the shim of Plant.get_PlantAux()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimPlant.PlantAuxSetICollectionOfEQAuxilary">
            <summary>Sets the shim of Plant.set_PlantAux(ICollection`1&lt;EQAuxilary&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimPlant.PlantIDGet">
            <summary>Sets the shim of Plant.get_PlantID()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimPlant.PlantIDSetInt32">
            <summary>Sets the shim of Plant.set_PlantID(Int32 value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimPlant.PlantLocationGet">
            <summary>Sets the shim of Plant.get_PlantLocation()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimPlant.PlantLocationSetString">
            <summary>Sets the shim of Plant.set_PlantLocation(String value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimPlant.PlantLoopsGet">
            <summary>Sets the shim of Plant.get_PlantLoops()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimPlant.PlantLoopsSetICollectionOfEQControlLoop">
            <summary>Sets the shim of Plant.set_PlantLoops(ICollection`1&lt;EQControlLoop&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimPlant.PlantNameGet">
            <summary>Sets the shim of Plant.get_PlantName()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimPlant.PlantNameSetString">
            <summary>Sets the shim of Plant.set_PlantName(String value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimPlant.PlantVesselsGet">
            <summary>Sets the shim of Plant.get_PlantVessels()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimPlant.PlantVesselsSetICollectionOfEQVessel">
            <summary>Sets the shim of Plant.set_PlantVessels(ICollection`1&lt;EQVessel&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimPlant.ThisPlantsBrandsGet">
            <summary>Sets the shim of Plant.get_ThisPlantsBrands()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimPlant.ThisPlantsBrandsSetICollectionOfMasterRecipe">
            <summary>Sets the shim of Plant.set_ThisPlantsBrands(ICollection`1&lt;MasterRecipe&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimPlant.UnitsGet">
            <summary>Sets the shim of Plant.get_Units()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimPlant.UnitsSetICollectionOfUnit">
            <summary>Sets the shim of Plant.set_Units(ICollection`1&lt;Unit&gt; value)</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.ShimPlant.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimPlant.AllInstances.BrewPubMenuGet">
            <summary>Sets the shim of Plant.get_BrewPubMenu()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimPlant.AllInstances.BrewPubMenuSetString">
            <summary>Sets the shim of Plant.set_BrewPubMenu(String value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimPlant.AllInstances.PlantAddressGet">
            <summary>Sets the shim of Plant.get_PlantAddress()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimPlant.AllInstances.PlantAddressSetString">
            <summary>Sets the shim of Plant.set_PlantAddress(String value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimPlant.AllInstances.PlantAuxGet">
            <summary>Sets the shim of Plant.get_PlantAux()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimPlant.AllInstances.PlantAuxSetICollectionOfEQAuxilary">
            <summary>Sets the shim of Plant.set_PlantAux(ICollection`1&lt;EQAuxilary&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimPlant.AllInstances.PlantIDGet">
            <summary>Sets the shim of Plant.get_PlantID()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimPlant.AllInstances.PlantIDSetInt32">
            <summary>Sets the shim of Plant.set_PlantID(Int32 value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimPlant.AllInstances.PlantLocationGet">
            <summary>Sets the shim of Plant.get_PlantLocation()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimPlant.AllInstances.PlantLocationSetString">
            <summary>Sets the shim of Plant.set_PlantLocation(String value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimPlant.AllInstances.PlantLoopsGet">
            <summary>Sets the shim of Plant.get_PlantLoops()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimPlant.AllInstances.PlantLoopsSetICollectionOfEQControlLoop">
            <summary>Sets the shim of Plant.set_PlantLoops(ICollection`1&lt;EQControlLoop&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimPlant.AllInstances.PlantNameGet">
            <summary>Sets the shim of Plant.get_PlantName()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimPlant.AllInstances.PlantNameSetString">
            <summary>Sets the shim of Plant.set_PlantName(String value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimPlant.AllInstances.PlantVesselsGet">
            <summary>Sets the shim of Plant.get_PlantVessels()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimPlant.AllInstances.PlantVesselsSetICollectionOfEQVessel">
            <summary>Sets the shim of Plant.set_PlantVessels(ICollection`1&lt;EQVessel&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimPlant.AllInstances.ThisPlantsBrandsGet">
            <summary>Sets the shim of Plant.get_ThisPlantsBrands()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimPlant.AllInstances.ThisPlantsBrandsSetICollectionOfMasterRecipe">
            <summary>Sets the shim of Plant.set_ThisPlantsBrands(ICollection`1&lt;MasterRecipe&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimPlant.AllInstances.UnitsGet">
            <summary>Sets the shim of Plant.get_Units()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimPlant.AllInstances.UnitsSetICollectionOfUnit">
            <summary>Sets the shim of Plant.set_Units(ICollection`1&lt;Unit&gt; value)</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.ShimRecUnitOperation">
            <summary>Shim type of BrewMLLib.RecUnitOperation</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimRecUnitOperation.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimRecUnitOperation.#ctor(BrewMLLib.RecUnitOperation)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimRecUnitOperation.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimRecUnitOperation.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimRecUnitOperation.AllTransitionsTrueGet">
            <summary>Sets the shim of RecUnitOperation.get_AllTransitionsTrue()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimRecUnitOperation.AllTransitionsTrueSetBoolean">
            <summary>Sets the shim of RecUnitOperation.set_AllTransitionsTrue(Boolean value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimRecUnitOperation.AllowedUnitsGet">
            <summary>Sets the shim of RecUnitOperation.get_AllowedUnits()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimRecUnitOperation.AllowedUnitsSetICollectionOfUnit">
            <summary>Sets the shim of RecUnitOperation.set_AllowedUnits(ICollection`1&lt;Unit&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimRecUnitOperation.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimRecUnitOperation.Constructor">
            <summary>Sets the shim of RecUnitOperation.RecUnitOperation()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimRecUnitOperation.OperationNameGet">
            <summary>Sets the shim of RecUnitOperation.get_OperationName()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimRecUnitOperation.OperationNameSetString">
            <summary>Sets the shim of RecUnitOperation.set_OperationName(String value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimRecUnitOperation.RecUnitOperationIDGet">
            <summary>Sets the shim of RecUnitOperation.get_RecUnitOperationID()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimRecUnitOperation.RecUnitOperationIDSetInt32">
            <summary>Sets the shim of RecUnitOperation.set_RecUnitOperationID(Int32 value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimRecUnitOperation.SetPointGet">
            <summary>Sets the shim of RecUnitOperation.get_SetPoint()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimRecUnitOperation.SetPointSetSingle">
            <summary>Sets the shim of RecUnitOperation.set_SetPoint(Single value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimRecUnitOperation.TransitionsGet">
            <summary>Sets the shim of RecUnitOperation.get_Transitions()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimRecUnitOperation.TransitionsSetListOfTransition">
            <summary>Sets the shim of RecUnitOperation.set_Transitions(List`1&lt;Transition&gt; value)</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.ShimRecUnitOperation.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimRecUnitOperation.AllInstances.AllTransitionsTrueGet">
            <summary>Sets the shim of RecUnitOperation.get_AllTransitionsTrue()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimRecUnitOperation.AllInstances.AllTransitionsTrueSetBoolean">
            <summary>Sets the shim of RecUnitOperation.set_AllTransitionsTrue(Boolean value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimRecUnitOperation.AllInstances.AllowedUnitsGet">
            <summary>Sets the shim of RecUnitOperation.get_AllowedUnits()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimRecUnitOperation.AllInstances.AllowedUnitsSetICollectionOfUnit">
            <summary>Sets the shim of RecUnitOperation.set_AllowedUnits(ICollection`1&lt;Unit&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimRecUnitOperation.AllInstances.OperationNameGet">
            <summary>Sets the shim of RecUnitOperation.get_OperationName()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimRecUnitOperation.AllInstances.OperationNameSetString">
            <summary>Sets the shim of RecUnitOperation.set_OperationName(String value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimRecUnitOperation.AllInstances.RecUnitOperationIDGet">
            <summary>Sets the shim of RecUnitOperation.get_RecUnitOperationID()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimRecUnitOperation.AllInstances.RecUnitOperationIDSetInt32">
            <summary>Sets the shim of RecUnitOperation.set_RecUnitOperationID(Int32 value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimRecUnitOperation.AllInstances.SetPointGet">
            <summary>Sets the shim of RecUnitOperation.get_SetPoint()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimRecUnitOperation.AllInstances.SetPointSetSingle">
            <summary>Sets the shim of RecUnitOperation.set_SetPoint(Single value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimRecUnitOperation.AllInstances.TransitionsGet">
            <summary>Sets the shim of RecUnitOperation.get_Transitions()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimRecUnitOperation.AllInstances.TransitionsSetListOfTransition">
            <summary>Sets the shim of RecUnitOperation.set_Transitions(List`1&lt;Transition&gt; value)</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.ShimTestEntitie">
            <summary>Shim type of BrewMLLib.TestEntitie</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimTestEntitie.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimTestEntitie.#ctor(BrewMLLib.TestEntitie)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimTestEntitie.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimTestEntitie.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTestEntitie.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTestEntitie.Constructor">
            <summary>Sets the shim of TestEntitie.TestEntitie()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTestEntitie.TestEntitieIDGet">
            <summary>Sets the shim of TestEntitie.get_TestEntitieID()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTestEntitie.TestEntitieIDSetInt32">
            <summary>Sets the shim of TestEntitie.set_TestEntitieID(Int32 value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTestEntitie.testfloatGet">
            <summary>Sets the shim of TestEntitie.get_testfloat()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTestEntitie.testfloatSetSingle">
            <summary>Sets the shim of TestEntitie.set_testfloat(Single value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTestEntitie.testintGet">
            <summary>Sets the shim of TestEntitie.get_testint()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTestEntitie.testintSetInt32">
            <summary>Sets the shim of TestEntitie.set_testint(Int32 value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTestEntitie.teststringGet">
            <summary>Sets the shim of TestEntitie.get_teststring()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTestEntitie.teststringSetString">
            <summary>Sets the shim of TestEntitie.set_teststring(String value)</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.ShimTestEntitie.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTestEntitie.AllInstances.TestEntitieIDGet">
            <summary>Sets the shim of TestEntitie.get_TestEntitieID()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTestEntitie.AllInstances.TestEntitieIDSetInt32">
            <summary>Sets the shim of TestEntitie.set_TestEntitieID(Int32 value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTestEntitie.AllInstances.testfloatGet">
            <summary>Sets the shim of TestEntitie.get_testfloat()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTestEntitie.AllInstances.testfloatSetSingle">
            <summary>Sets the shim of TestEntitie.set_testfloat(Single value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTestEntitie.AllInstances.testintGet">
            <summary>Sets the shim of TestEntitie.get_testint()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTestEntitie.AllInstances.testintSetInt32">
            <summary>Sets the shim of TestEntitie.set_testint(Int32 value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTestEntitie.AllInstances.teststringGet">
            <summary>Sets the shim of TestEntitie.get_teststring()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTestEntitie.AllInstances.teststringSetString">
            <summary>Sets the shim of TestEntitie.set_teststring(String value)</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.ShimTestEntitieBuilder">
            <summary>Shim type of BrewMLLib.TestEntitieBuilder</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimTestEntitieBuilder.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimTestEntitieBuilder.#ctor(BrewMLLib.TestEntitieBuilder)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimTestEntitieBuilder.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimTestEntitieBuilder.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimTestEntitieBuilder.Bind(BrewMLLib.IFluentTest)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTestEntitieBuilder.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTestEntitieBuilder.Constructor">
            <summary>Sets the shim of TestEntitieBuilder.TestEntitieBuilder()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTestEntitieBuilder.Create">
            <summary>Sets the shim of TestEntitieBuilder.Create()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTestEntitieBuilder.SetTestIntInt32">
            <summary>Sets the shim of TestEntitieBuilder.SetTestInt(Int32 q)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTestEntitieBuilder.SetTestStringString">
            <summary>Sets the shim of TestEntitieBuilder.SetTestString(String w)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTestEntitieBuilder.Value">
            <summary>Sets the shim of TestEntitieBuilder.Value()</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.ShimTestEntitieBuilder.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTestEntitieBuilder.AllInstances.Create">
            <summary>Sets the shim of TestEntitieBuilder.Create()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTestEntitieBuilder.AllInstances.SetTestIntInt32">
            <summary>Sets the shim of TestEntitieBuilder.SetTestInt(Int32 q)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTestEntitieBuilder.AllInstances.SetTestStringString">
            <summary>Sets the shim of TestEntitieBuilder.SetTestString(String w)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTestEntitieBuilder.AllInstances.Value">
            <summary>Sets the shim of TestEntitieBuilder.Value()</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.ShimTestEntitieTwo">
            <summary>Shim type of BrewMLLib.TestEntitieTwo</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimTestEntitieTwo.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimTestEntitieTwo.#ctor(BrewMLLib.TestEntitieTwo)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimTestEntitieTwo.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimTestEntitieTwo.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTestEntitieTwo.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTestEntitieTwo.Constructor">
            <summary>Sets the shim of TestEntitieTwo.TestEntitieTwo()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTestEntitieTwo.ConstructorStringInt32Single">
            <summary>Sets the shim of TestEntitieTwo.TestEntitieTwo(String asdf, Int32 asdd, Single fve)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTestEntitieTwo.TestEntitieTwoIDGet">
            <summary>Sets the shim of TestEntitieTwo.get_TestEntitieTwoID()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTestEntitieTwo.TestEntitieTwoIDSetInt32">
            <summary>Sets the shim of TestEntitieTwo.set_TestEntitieTwoID(Int32 value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTestEntitieTwo.testfloatGet">
            <summary>Sets the shim of TestEntitieTwo.get_testfloat()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTestEntitieTwo.testfloatSetSingle">
            <summary>Sets the shim of TestEntitieTwo.set_testfloat(Single value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTestEntitieTwo.testintGet">
            <summary>Sets the shim of TestEntitieTwo.get_testint()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTestEntitieTwo.testintSetInt32">
            <summary>Sets the shim of TestEntitieTwo.set_testint(Int32 value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTestEntitieTwo.teststringGet">
            <summary>Sets the shim of TestEntitieTwo.get_teststring()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTestEntitieTwo.teststringSetString">
            <summary>Sets the shim of TestEntitieTwo.set_teststring(String value)</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.ShimTestEntitieTwo.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTestEntitieTwo.AllInstances.TestEntitieTwoIDGet">
            <summary>Sets the shim of TestEntitieTwo.get_TestEntitieTwoID()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTestEntitieTwo.AllInstances.TestEntitieTwoIDSetInt32">
            <summary>Sets the shim of TestEntitieTwo.set_TestEntitieTwoID(Int32 value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTestEntitieTwo.AllInstances.testfloatGet">
            <summary>Sets the shim of TestEntitieTwo.get_testfloat()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTestEntitieTwo.AllInstances.testfloatSetSingle">
            <summary>Sets the shim of TestEntitieTwo.set_testfloat(Single value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTestEntitieTwo.AllInstances.testintGet">
            <summary>Sets the shim of TestEntitieTwo.get_testint()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTestEntitieTwo.AllInstances.testintSetInt32">
            <summary>Sets the shim of TestEntitieTwo.set_testint(Int32 value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTestEntitieTwo.AllInstances.teststringGet">
            <summary>Sets the shim of TestEntitieTwo.get_teststring()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTestEntitieTwo.AllInstances.teststringSetString">
            <summary>Sets the shim of TestEntitieTwo.set_teststring(String value)</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.ShimTransition">
            <summary>Shim type of BrewMLLib.Transition</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimTransition.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimTransition.#ctor(BrewMLLib.Transition)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimTransition.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimTransition.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTransition.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTransition.Constructor">
            <summary>Sets the shim of Transition.Transition()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTransition.EvaluateConditionGet">
            <summary>Sets the shim of Transition.get_EvaluateCondition()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTransition.EvaluateConditionSetNullableOfBoolean">
            <summary>Sets the shim of Transition.set_EvaluateCondition(Nullable`1&lt;Boolean&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTransition.SetPointGet">
            <summary>Sets the shim of Transition.get_SetPoint()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTransition.SetPointSetSingle">
            <summary>Sets the shim of Transition.set_SetPoint(Single value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTransition.TimeGet">
            <summary>Sets the shim of Transition.get_Time()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTransition.TimeSetInt32">
            <summary>Sets the shim of Transition.set_Time(Int32 value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTransition.TimerGet">
            <summary>Sets the shim of Transition.get_Timer()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTransition.TimerSetNullableOfInt32">
            <summary>Sets the shim of Transition.set_Timer(Nullable`1&lt;Int32&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTransition.TransitionIDGet">
            <summary>Sets the shim of Transition.get_TransitionID()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTransition.TransitionIDSetInt32">
            <summary>Sets the shim of Transition.set_TransitionID(Int32 value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTransition.TransitionNameGet">
            <summary>Sets the shim of Transition.get_TransitionName()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTransition.TransitionNameSetString">
            <summary>Sets the shim of Transition.set_TransitionName(String value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTransition.loopGet">
            <summary>Sets the shim of Transition.get_loop()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTransition.loopSetEQControlLoop">
            <summary>Sets the shim of Transition.set_loop(EQControlLoop value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTransition.operantGet">
            <summary>Sets the shim of Transition.get_operant()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTransition.operantSetOperants">
            <summary>Sets the shim of Transition.set_operant(Operants value)</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.ShimTransition.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTransition.AllInstances.EvaluateConditionGet">
            <summary>Sets the shim of Transition.get_EvaluateCondition()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTransition.AllInstances.EvaluateConditionSetNullableOfBoolean">
            <summary>Sets the shim of Transition.set_EvaluateCondition(Nullable`1&lt;Boolean&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTransition.AllInstances.SetPointGet">
            <summary>Sets the shim of Transition.get_SetPoint()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTransition.AllInstances.SetPointSetSingle">
            <summary>Sets the shim of Transition.set_SetPoint(Single value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTransition.AllInstances.TimeGet">
            <summary>Sets the shim of Transition.get_Time()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTransition.AllInstances.TimeSetInt32">
            <summary>Sets the shim of Transition.set_Time(Int32 value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTransition.AllInstances.TimerGet">
            <summary>Sets the shim of Transition.get_Timer()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTransition.AllInstances.TimerSetNullableOfInt32">
            <summary>Sets the shim of Transition.set_Timer(Nullable`1&lt;Int32&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTransition.AllInstances.TransitionIDGet">
            <summary>Sets the shim of Transition.get_TransitionID()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTransition.AllInstances.TransitionIDSetInt32">
            <summary>Sets the shim of Transition.set_TransitionID(Int32 value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTransition.AllInstances.TransitionNameGet">
            <summary>Sets the shim of Transition.get_TransitionName()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTransition.AllInstances.TransitionNameSetString">
            <summary>Sets the shim of Transition.set_TransitionName(String value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTransition.AllInstances.loopGet">
            <summary>Sets the shim of Transition.get_loop()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTransition.AllInstances.loopSetEQControlLoop">
            <summary>Sets the shim of Transition.set_loop(EQControlLoop value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTransition.AllInstances.operantGet">
            <summary>Sets the shim of Transition.get_operant()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimTransition.AllInstances.operantSetOperants">
            <summary>Sets the shim of Transition.set_operant(Operants value)</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.ShimUnit">
            <summary>Shim type of BrewMLLib.Unit</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimUnit.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimUnit.#ctor(BrewMLLib.Unit)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimUnit.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.ShimUnit.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimUnit.AvailableOperationsGet">
            <summary>Sets the shim of Unit.get_AvailableOperations()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimUnit.AvailableOperationsSetICollectionOfEQUnitOperation">
            <summary>Sets the shim of Unit.set_AvailableOperations(ICollection`1&lt;EQUnitOperation&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimUnit.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimUnit.Constructor">
            <summary>Sets the shim of Unit.Unit()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimUnit.CurrentBatchGet">
            <summary>Sets the shim of Unit.get_CurrentBatch()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimUnit.CurrentBatchSetBatch">
            <summary>Sets the shim of Unit.set_CurrentBatch(Batch value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimUnit.CurrentEQOperationGet">
            <summary>Sets the shim of Unit.get_CurrentEQOperation()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimUnit.CurrentEQOperationSetEQUnitOperation">
            <summary>Sets the shim of Unit.set_CurrentEQOperation(EQUnitOperation value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimUnit.InputUnitsGet">
            <summary>Sets the shim of Unit.get_InputUnits()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimUnit.InputUnitsSetICollectionOfUnit">
            <summary>Sets the shim of Unit.set_InputUnits(ICollection`1&lt;Unit&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimUnit.OutputUnitsGet">
            <summary>Sets the shim of Unit.get_OutputUnits()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimUnit.OutputUnitsSetICollectionOfUnit">
            <summary>Sets the shim of Unit.set_OutputUnits(ICollection`1&lt;Unit&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimUnit.PlantGet">
            <summary>Sets the shim of Unit.get_Plant()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimUnit.PlantSetPlant">
            <summary>Sets the shim of Unit.set_Plant(Plant value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimUnit.UnitAuxGet">
            <summary>Sets the shim of Unit.get_UnitAux()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimUnit.UnitAuxSetICollectionOfEQAuxilary">
            <summary>Sets the shim of Unit.set_UnitAux(ICollection`1&lt;EQAuxilary&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimUnit.UnitIDGet">
            <summary>Sets the shim of Unit.get_UnitID()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimUnit.UnitIDSetInt32">
            <summary>Sets the shim of Unit.set_UnitID(Int32 value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimUnit.UnitLoopsGet">
            <summary>Sets the shim of Unit.get_UnitLoops()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimUnit.UnitLoopsSetICollectionOfEQControlLoop">
            <summary>Sets the shim of Unit.set_UnitLoops(ICollection`1&lt;EQControlLoop&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimUnit.UnitNameGet">
            <summary>Sets the shim of Unit.get_UnitName()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimUnit.UnitNameSetString">
            <summary>Sets the shim of Unit.set_UnitName(String value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimUnit.UnitVesselsGet">
            <summary>Sets the shim of Unit.get_UnitVessels()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimUnit.UnitVesselsSetICollectionOfEQVessel">
            <summary>Sets the shim of Unit.set_UnitVessels(ICollection`1&lt;EQVessel&gt; value)</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.ShimUnit.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimUnit.AllInstances.AvailableOperationsGet">
            <summary>Sets the shim of Unit.get_AvailableOperations()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimUnit.AllInstances.AvailableOperationsSetICollectionOfEQUnitOperation">
            <summary>Sets the shim of Unit.set_AvailableOperations(ICollection`1&lt;EQUnitOperation&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimUnit.AllInstances.CurrentBatchGet">
            <summary>Sets the shim of Unit.get_CurrentBatch()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimUnit.AllInstances.CurrentBatchSetBatch">
            <summary>Sets the shim of Unit.set_CurrentBatch(Batch value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimUnit.AllInstances.CurrentEQOperationGet">
            <summary>Sets the shim of Unit.get_CurrentEQOperation()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimUnit.AllInstances.CurrentEQOperationSetEQUnitOperation">
            <summary>Sets the shim of Unit.set_CurrentEQOperation(EQUnitOperation value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimUnit.AllInstances.InputUnitsGet">
            <summary>Sets the shim of Unit.get_InputUnits()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimUnit.AllInstances.InputUnitsSetICollectionOfUnit">
            <summary>Sets the shim of Unit.set_InputUnits(ICollection`1&lt;Unit&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimUnit.AllInstances.OutputUnitsGet">
            <summary>Sets the shim of Unit.get_OutputUnits()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimUnit.AllInstances.OutputUnitsSetICollectionOfUnit">
            <summary>Sets the shim of Unit.set_OutputUnits(ICollection`1&lt;Unit&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimUnit.AllInstances.PlantGet">
            <summary>Sets the shim of Unit.get_Plant()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimUnit.AllInstances.PlantSetPlant">
            <summary>Sets the shim of Unit.set_Plant(Plant value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimUnit.AllInstances.UnitAuxGet">
            <summary>Sets the shim of Unit.get_UnitAux()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimUnit.AllInstances.UnitAuxSetICollectionOfEQAuxilary">
            <summary>Sets the shim of Unit.set_UnitAux(ICollection`1&lt;EQAuxilary&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimUnit.AllInstances.UnitIDGet">
            <summary>Sets the shim of Unit.get_UnitID()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimUnit.AllInstances.UnitIDSetInt32">
            <summary>Sets the shim of Unit.set_UnitID(Int32 value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimUnit.AllInstances.UnitLoopsGet">
            <summary>Sets the shim of Unit.get_UnitLoops()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimUnit.AllInstances.UnitLoopsSetICollectionOfEQControlLoop">
            <summary>Sets the shim of Unit.set_UnitLoops(ICollection`1&lt;EQControlLoop&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimUnit.AllInstances.UnitNameGet">
            <summary>Sets the shim of Unit.get_UnitName()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimUnit.AllInstances.UnitNameSetString">
            <summary>Sets the shim of Unit.set_UnitName(String value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimUnit.AllInstances.UnitVesselsGet">
            <summary>Sets the shim of Unit.get_UnitVessels()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.ShimUnit.AllInstances.UnitVesselsSetICollectionOfEQVessel">
            <summary>Sets the shim of Unit.set_UnitVessels(ICollection`1&lt;EQVessel&gt; value)</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.StubBaseEquip">
            <summary>Stub type of BrewMLLib.BaseEquip</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubBaseEquip.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubBaseEquip.InitializeStub">
            <summary>Initializes a new instance of type StubBaseEquip</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubBaseEquip.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubBaseEquip.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubBaseEquip.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.StubBatch">
            <summary>Stub type of BrewMLLib.Batch</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubBatch.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubBatch.AllocatedUnitsGet">
            <summary>Sets the stub of Batch.get_AllocatedUnits()</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubBatch.AllocatedUnitsSetICollectionOfUnit">
            <summary>Sets the stub of Batch.set_AllocatedUnits(ICollection`1&lt;Unit&gt; value)</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubBatch.AttachBackingFieldToAllocatedUnits">
            <summary>Attaches delegates to emulate StubBatch.AllocatedUnits as a property with a backing field.</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubBatch.InitializeStub">
            <summary>Initializes a new instance of type StubBatch</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubBatch.AllocatedUnits">
            <summary>Sets the stub of Batch.get_AllocatedUnits()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubBatch.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubBatch.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubBatch.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.StubBrewDBContext">
            <summary>Stub type of BrewMLLib.BrewDBContext</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubBrewDBContext.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubBrewDBContext.Dispose(System.Boolean)">
            <summary>Sets the stub of DbContext.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubBrewDBContext.DisposeBoolean">
            <summary>Sets the stub of DbContext.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubBrewDBContext.Equals(System.Object)">
            <summary>Sets the stub of DbContext.Equals(Object obj)</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubBrewDBContext.EqualsObject">
            <summary>Sets the stub of DbContext.Equals(Object obj)</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubBrewDBContext.GetHashCode">
            <summary>Sets the stub of DbContext.GetHashCode()</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubBrewDBContext.GetHashCode01">
            <summary>Sets the stub of DbContext.GetHashCode()</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubBrewDBContext.InitializeStub">
            <summary>Initializes a new instance of type StubBrewDBContext</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubBrewDBContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <summary>Sets the stub of BrewDBContext.OnModelCreating(DbModelBuilder modelBuilder)</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubBrewDBContext.OnModelCreatingDbModelBuilder">
            <summary>Sets the stub of BrewDBContext.OnModelCreating(DbModelBuilder modelBuilder)</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubBrewDBContext.SaveChanges">
            <summary>Sets the stub of DbContext.SaveChanges()</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubBrewDBContext.SaveChanges01">
            <summary>Sets the stub of DbContext.SaveChanges()</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubBrewDBContext.SaveChangesAsync">
            <summary>Sets the stub of DbContext.SaveChangesAsync()</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubBrewDBContext.SaveChangesAsync(System.Threading.CancellationToken)">
            <summary>Sets the stub of DbContext.SaveChangesAsync(CancellationToken cancellationToken)</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubBrewDBContext.SaveChangesAsync01">
            <summary>Sets the stub of DbContext.SaveChangesAsync()</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubBrewDBContext.SaveChangesAsyncCancellationToken">
            <summary>Sets the stub of DbContext.SaveChangesAsync(CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubBrewDBContext.ShouldValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry)">
            <summary>Sets the stub of DbContext.ShouldValidateEntity(DbEntityEntry entityEntry)</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubBrewDBContext.ShouldValidateEntityDbEntityEntry">
            <summary>Sets the stub of DbContext.ShouldValidateEntity(DbEntityEntry entityEntry)</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubBrewDBContext.ToString">
            <summary>Sets the stub of DbContext.ToString()</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubBrewDBContext.ToString01">
            <summary>Sets the stub of DbContext.ToString()</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubBrewDBContext.ValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IDictionary{System.Object,System.Object})">
            <summary>Sets the stub of DbContext.ValidateEntity(DbEntityEntry entityEntry, IDictionary`2&lt;Object,Object&gt; items)</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubBrewDBContext.ValidateEntityDbEntityEntryIDictionaryOfObjectObject">
            <summary>Sets the stub of DbContext.ValidateEntity(DbEntityEntry entityEntry, IDictionary`2&lt;Object,Object&gt; items)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubBrewDBContext.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubBrewDBContext.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubBrewDBContext.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.StubBrewML">
            <summary>Stub type of BrewMLLib.BrewML</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubBrewML.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubBrewML.InitializeStub">
            <summary>Initializes a new instance of type StubBrewML</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubBrewML.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubBrewML.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubBrewML.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.StubCollectionOfTestEntitie">
            <summary>Stub type of BrewMLLib.CollectionOfTestEntitie</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubCollectionOfTestEntitie.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubCollectionOfTestEntitie.InitializeStub">
            <summary>Initializes a new instance of type StubCollectionOfTestEntitie</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubCollectionOfTestEntitie.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubCollectionOfTestEntitie.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubCollectionOfTestEntitie.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.StubEQAuxilary">
            <summary>Stub type of BrewMLLib.EQAuxilary</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubEQAuxilary.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubEQAuxilary.AttachBackingFieldToEQType">
            <summary>Attaches delegates to emulate StubEQAuxilary.EQType as a property with a backing field.</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubEQAuxilary.AttachBackingFieldToPlant">
            <summary>Attaches delegates to emulate StubEQAuxilary.Plant as a property with a backing field.</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubEQAuxilary.EQTypeGet">
            <summary>Sets the stub of EQAuxilary.get_EQType()</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubEQAuxilary.EQTypeSetEQType">
            <summary>Sets the stub of EQAuxilary.set_EQType(EQType value)</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubEQAuxilary.InitializeStub">
            <summary>Initializes a new instance of type StubEQAuxilary</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubEQAuxilary.PlantGet">
            <summary>Sets the stub of EQAuxilary.get_Plant()</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubEQAuxilary.PlantSetPlant">
            <summary>Sets the stub of EQAuxilary.set_Plant(Plant value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubEQAuxilary.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubEQAuxilary.EQType">
            <summary>Sets the stub of EQAuxilary.get_EQType()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubEQAuxilary.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubEQAuxilary.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubEQAuxilary.Plant">
            <summary>Sets the stub of EQAuxilary.get_Plant()</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.StubEQControlLoop">
            <summary>Stub type of BrewMLLib.EQControlLoop</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubEQControlLoop.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubEQControlLoop.AttachBackingFieldToEQType">
            <summary>Attaches delegates to emulate StubEQControlLoop.EQType as a property with a backing field.</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubEQControlLoop.AttachBackingFieldToPlant">
            <summary>Attaches delegates to emulate StubEQControlLoop.Plant as a property with a backing field.</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubEQControlLoop.AttachBackingFieldToUnit">
            <summary>Attaches delegates to emulate StubEQControlLoop.Unit as a property with a backing field.</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubEQControlLoop.EQTypeGet">
            <summary>Sets the stub of EQControlLoop.get_EQType()</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubEQControlLoop.EQTypeSetEQType">
            <summary>Sets the stub of EQControlLoop.set_EQType(EQType value)</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubEQControlLoop.InitializeStub">
            <summary>Initializes a new instance of type StubEQControlLoop</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubEQControlLoop.PlantGet">
            <summary>Sets the stub of EQControlLoop.get_Plant()</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubEQControlLoop.PlantSetPlant">
            <summary>Sets the stub of EQControlLoop.set_Plant(Plant value)</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubEQControlLoop.UnitGet">
            <summary>Sets the stub of EQControlLoop.get_Unit()</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubEQControlLoop.UnitSetUnit">
            <summary>Sets the stub of EQControlLoop.set_Unit(Unit value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubEQControlLoop.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubEQControlLoop.EQType">
            <summary>Sets the stub of EQControlLoop.get_EQType()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubEQControlLoop.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubEQControlLoop.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubEQControlLoop.Plant">
            <summary>Sets the stub of EQControlLoop.get_Plant()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubEQControlLoop.Unit">
            <summary>Sets the stub of EQControlLoop.get_Unit()</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.StubEQType">
            <summary>Stub type of BrewMLLib.EQType</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubEQType.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubEQType.InitializeStub">
            <summary>Initializes a new instance of type StubEQType</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubEQType.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubEQType.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubEQType.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.StubEQUnitOperation">
            <summary>Stub type of BrewMLLib.EQUnitOperation</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubEQUnitOperation.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubEQUnitOperation.AttachBackingFieldToUnitsThisOperationCanRunOn">
            <summary>Attaches delegates to emulate StubEQUnitOperation.UnitsThisOperationCanRunOn as a property with a backing field.</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubEQUnitOperation.InitializeStub">
            <summary>Initializes a new instance of type StubEQUnitOperation</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubEQUnitOperation.UnitsThisOperationCanRunOnGet">
            <summary>Sets the stub of EQUnitOperation.get_UnitsThisOperationCanRunOn()</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubEQUnitOperation.UnitsThisOperationCanRunOnSetICollectionOfUnit">
            <summary>Sets the stub of EQUnitOperation.set_UnitsThisOperationCanRunOn(ICollection`1&lt;Unit&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubEQUnitOperation.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubEQUnitOperation.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubEQUnitOperation.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubEQUnitOperation.UnitsThisOperationCanRunOn">
            <summary>Sets the stub of EQUnitOperation.get_UnitsThisOperationCanRunOn()</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.StubEQVessel">
            <summary>Stub type of BrewMLLib.EQVessel</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubEQVessel.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubEQVessel.AttachBackingFieldToEQType">
            <summary>Attaches delegates to emulate StubEQVessel.EQType as a property with a backing field.</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubEQVessel.AttachBackingFieldToPlant">
            <summary>Attaches delegates to emulate StubEQVessel.Plant as a property with a backing field.</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubEQVessel.EQTypeGet">
            <summary>Sets the stub of EQVessel.get_EQType()</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubEQVessel.EQTypeSetEQType">
            <summary>Sets the stub of EQVessel.set_EQType(EQType value)</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubEQVessel.InitializeStub">
            <summary>Initializes a new instance of type StubEQVessel</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubEQVessel.PlantGet">
            <summary>Sets the stub of EQVessel.get_Plant()</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubEQVessel.PlantSetPlant">
            <summary>Sets the stub of EQVessel.set_Plant(Plant value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubEQVessel.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubEQVessel.EQType">
            <summary>Sets the stub of EQVessel.get_EQType()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubEQVessel.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubEQVessel.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubEQVessel.Plant">
            <summary>Sets the stub of EQVessel.get_Plant()</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.StubFluentControlLoop">
            <summary>Stub type of BrewMLLib.FluentControlLoop</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubFluentControlLoop.#ctor(BrewMLLib.Plant)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubFluentControlLoop.#ctor(BrewMLLib.Plant,System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubFluentControlLoop.#ctor(BrewMLLib.Unit,BrewMLLib.Plant)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubFluentControlLoop.InitializeStub">
            <summary>Initializes a new instance of type StubFluentControlLoop</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubFluentControlLoop.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubFluentControlLoop.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubFluentControlLoop.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.StubFluentEQType">
            <summary>Stub type of BrewMLLib.FluentEQType</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubFluentEQType.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubFluentEQType.InitializeStub">
            <summary>Initializes a new instance of type StubFluentEQType</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubFluentEQType.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubFluentEQType.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubFluentEQType.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.StubFluentPlant">
            <summary>Stub type of BrewMLLib.FluentPlant</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubFluentPlant.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubFluentPlant.InitializeStub">
            <summary>Initializes a new instance of type StubFluentPlant</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubFluentPlant.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubFluentPlant.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubFluentPlant.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.StubFluentRecipe">
            <summary>Stub type of BrewMLLib.FluentRecipe</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubFluentRecipe.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubFluentRecipe.InitializeStub">
            <summary>Initializes a new instance of type StubFluentRecipe</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubFluentRecipe.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubFluentRecipe.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubFluentRecipe.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.StubFluentRecipeOperations">
            <summary>Stub type of BrewMLLib.FluentRecipeOperations</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubFluentRecipeOperations.#ctor(BrewMLLib.IFluentRecipe)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubFluentRecipeOperations.#ctor(BrewMLLib.IFluentRecipe,System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubFluentRecipeOperations.InitializeStub">
            <summary>Initializes a new instance of type StubFluentRecipeOperations</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubFluentRecipeOperations.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubFluentRecipeOperations.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubFluentRecipeOperations.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.StubFluentTransition">
            <summary>Stub type of BrewMLLib.FluentTransition</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubFluentTransition.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubFluentTransition.#ctor(BrewMLLib.IFluentRecipeOperations)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubFluentTransition.InitializeStub">
            <summary>Initializes a new instance of type StubFluentTransition</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubFluentTransition.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubFluentTransition.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubFluentTransition.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.StubFluentUnit">
            <summary>Stub type of BrewMLLib.FluentUnit</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubFluentUnit.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubFluentUnit.#ctor(BrewMLLib.Plant)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubFluentUnit.#ctor(BrewMLLib.Plant,System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubFluentUnit.InitializeStub">
            <summary>Initializes a new instance of type StubFluentUnit</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubFluentUnit.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubFluentUnit.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubFluentUnit.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.StubIEQUnitOperation">
            <summary>Stub type of BrewMLLib.IEQUnitOperation</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubIEQUnitOperation.#ctor">
            <summary>Initializes a new instance of type StubIEQUnitOperation</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubIEQUnitOperation.AddEQUnitOperationStringString">
            <summary>Sets the stub of IEQUnitOperation.AddEQUnitOperation(String Name, String UnitName)</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubIEQUnitOperation.bmll::BrewMLLib#IEQUnitOperation#AddEQUnitOperation(System.String,System.String)">
            <summary>Sets the stub of IEQUnitOperation.AddEQUnitOperation(String Name, String UnitName)</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubIEQUnitOperation.bmll::BrewMLLib#IEQUnitOperation#ForEQUnitOperation(System.String)">
            <summary>Sets the stub of IEQUnitOperation.ForEQUnitOperation(String Name)</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubIEQUnitOperation.bmll::BrewMLLib#IEQUnitOperation#SetUnitForThisOp(System.String)">
            <summary>Sets the stub of IEQUnitOperation.SetUnitForThisOp(String Name)</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubIEQUnitOperation.ForEQUnitOperationString">
            <summary>Sets the stub of IEQUnitOperation.ForEQUnitOperation(String Name)</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubIEQUnitOperation.SetUnitForThisOpString">
            <summary>Sets the stub of IEQUnitOperation.SetUnitForThisOp(String Name)</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.StubIFluentControlLoop">
            <summary>Stub type of BrewMLLib.IFluentControlLoop</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubIFluentControlLoop.#ctor">
            <summary>Initializes a new instance of type StubIFluentControlLoop</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubIFluentControlLoop.AddControlLoopStringString">
            <summary>Sets the stub of IFluentControlLoop.AddControlLoop(String Name, String EqType)</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubIFluentControlLoop.bmll::BrewMLLib#IFluentControlLoop#AddControlLoop(System.String,System.String)">
            <summary>Sets the stub of IFluentControlLoop.AddControlLoop(String Name, String EqType)</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubIFluentControlLoop.bmll::BrewMLLib#IFluentControlLoop#ForControlLoop(System.String)">
            <summary>Sets the stub of IFluentControlLoop.ForControlLoop(String Name)</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubIFluentControlLoop.bmll::BrewMLLib#IFluentControlLoop#GetMessage">
            <summary>Sets the stub of IFluentControlLoop.GetMessage()</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubIFluentControlLoop.bmll::BrewMLLib#IFluentControlLoop#GetSetPoint">
            <summary>Sets the stub of IFluentControlLoop.GetSetPoint()</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubIFluentControlLoop.bmll::BrewMLLib#IFluentControlLoop#HasType(System.String)">
            <summary>Sets the stub of IFluentControlLoop.HasType(String EqType)</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubIFluentControlLoop.bmll::BrewMLLib#IFluentControlLoop#SetSetPoint(System.Single)">
            <summary>Sets the stub of IFluentControlLoop.SetSetPoint(Single SetPoint)</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubIFluentControlLoop.ForControlLoopString">
            <summary>Sets the stub of IFluentControlLoop.ForControlLoop(String Name)</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubIFluentControlLoop.GetMessage">
            <summary>Sets the stub of IFluentControlLoop.GetMessage()</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubIFluentControlLoop.GetSetPoint">
            <summary>Sets the stub of IFluentControlLoop.GetSetPoint()</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubIFluentControlLoop.HasTypeString">
            <summary>Sets the stub of IFluentControlLoop.HasType(String EqType)</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubIFluentControlLoop.SetSetPointSingle">
            <summary>Sets the stub of IFluentControlLoop.SetSetPoint(Single SetPoint)</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.StubIFluentEQType">
            <summary>Stub type of BrewMLLib.IFluentEQType</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubIFluentEQType.#ctor">
            <summary>Initializes a new instance of type StubIFluentEQType</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubIFluentEQType.AddEQTypeString">
            <summary>Sets the stub of IFluentEQType.AddEQType(String Name)</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubIFluentEQType.bmll::BrewMLLib#IFluentEQType#AddEQType(System.String)">
            <summary>Sets the stub of IFluentEQType.AddEQType(String Name)</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubIFluentEQType.bmll::BrewMLLib#IFluentEQType#ForEQType(System.String)">
            <summary>Sets the stub of IFluentEQType.ForEQType(String Name)</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubIFluentEQType.bmll::BrewMLLib#IFluentEQType#GetEQType(System.String)">
            <summary>Sets the stub of IFluentEQType.GetEQType(String Name)</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubIFluentEQType.bmll::BrewMLLib#IFluentEQType#GetMessage">
            <summary>Sets the stub of IFluentEQType.GetMessage()</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubIFluentEQType.ForEQTypeString">
            <summary>Sets the stub of IFluentEQType.ForEQType(String Name)</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubIFluentEQType.GetEQTypeString">
            <summary>Sets the stub of IFluentEQType.GetEQType(String Name)</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubIFluentEQType.GetMessage">
            <summary>Sets the stub of IFluentEQType.GetMessage()</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.StubIFluentPlant">
            <summary>Stub type of BrewMLLib.IFluentPlant</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubIFluentPlant.#ctor">
            <summary>Initializes a new instance of type StubIFluentPlant</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubIFluentPlant.AddPlantString">
            <summary>Sets the stub of IFluentPlant.AddPlant(String Name)</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubIFluentPlant.bmll::BrewMLLib#IFluentPlant#AddPlant(System.String)">
            <summary>Sets the stub of IFluentPlant.AddPlant(String Name)</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubIFluentPlant.bmll::BrewMLLib#IFluentPlant#ForPlant(System.String)">
            <summary>Sets the stub of IFluentPlant.ForPlant(String Name)</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubIFluentPlant.bmll::BrewMLLib#IFluentPlant#GetMessage">
            <summary>Sets the stub of IFluentPlant.GetMessage()</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubIFluentPlant.bmll::BrewMLLib#IFluentPlant#GetPlant">
            <summary>Sets the stub of IFluentPlant.GetPlant()</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubIFluentPlant.bmll::BrewMLLib#IFluentPlant#HasLoops">
            <summary>Sets the stub of IFluentPlant.HasLoops()</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubIFluentPlant.bmll::BrewMLLib#IFluentPlant#HasLoops(System.String)">
            <summary>Sets the stub of IFluentPlant.HasLoops(String Name)</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubIFluentPlant.bmll::BrewMLLib#IFluentPlant#HasUnits">
            <summary>Sets the stub of IFluentPlant.HasUnits()</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubIFluentPlant.bmll::BrewMLLib#IFluentPlant#HasUnits(System.String)">
            <summary>Sets the stub of IFluentPlant.HasUnits(String Name)</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubIFluentPlant.ForPlantString">
            <summary>Sets the stub of IFluentPlant.ForPlant(String Name)</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubIFluentPlant.GetMessage">
            <summary>Sets the stub of IFluentPlant.GetMessage()</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubIFluentPlant.GetPlant">
            <summary>Sets the stub of IFluentPlant.GetPlant()</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubIFluentPlant.HasLoops">
            <summary>Sets the stub of IFluentPlant.HasLoops()</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubIFluentPlant.HasLoopsString">
            <summary>Sets the stub of IFluentPlant.HasLoops(String Name)</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubIFluentPlant.HasUnits">
            <summary>Sets the stub of IFluentPlant.HasUnits()</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubIFluentPlant.HasUnitsString">
            <summary>Sets the stub of IFluentPlant.HasUnits(String Name)</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.StubIFluentRecipe">
            <summary>Stub type of BrewMLLib.IFluentRecipe</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubIFluentRecipe.#ctor">
            <summary>Initializes a new instance of type StubIFluentRecipe</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubIFluentRecipe.AddRecipeString">
            <summary>Sets the stub of IFluentRecipe.AddRecipe(String Name)</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubIFluentRecipe.bmll::BrewMLLib#IFluentRecipe#AddRecipe(System.String)">
            <summary>Sets the stub of IFluentRecipe.AddRecipe(String Name)</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubIFluentRecipe.bmll::BrewMLLib#IFluentRecipe#ForRecipe(System.String)">
            <summary>Sets the stub of IFluentRecipe.ForRecipe(String Name)</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubIFluentRecipe.bmll::BrewMLLib#IFluentRecipe#GetRecipe">
            <summary>Sets the stub of IFluentRecipe.GetRecipe()</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubIFluentRecipe.bmll::BrewMLLib#IFluentRecipe#HasIngredients(System.String,System.Single)">
            <summary>Sets the stub of IFluentRecipe.HasIngredients(String Name, Single AmountToAdd)</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubIFluentRecipe.bmll::BrewMLLib#IFluentRecipe#HasRecOperations">
            <summary>Sets the stub of IFluentRecipe.HasRecOperations()</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubIFluentRecipe.bmll::BrewMLLib#IFluentRecipe#HasRecOperations(System.String)">
            <summary>Sets the stub of IFluentRecipe.HasRecOperations(String RecOperation)</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubIFluentRecipe.bmll::BrewMLLib#IFluentRecipe#SetBrandDescription(System.String)">
            <summary>Sets the stub of IFluentRecipe.SetBrandDescription(String BrandDescription)</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubIFluentRecipe.bmll::BrewMLLib#IFluentRecipe#SetBrandName(System.String)">
            <summary>Sets the stub of IFluentRecipe.SetBrandName(String BrandName)</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubIFluentRecipe.bmll::BrewMLLib#IFluentRecipe#SetQualityTarget(System.String)">
            <summary>Sets the stub of IFluentRecipe.SetQualityTarget(String QTarget)</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubIFluentRecipe.ForRecipeString">
            <summary>Sets the stub of IFluentRecipe.ForRecipe(String Name)</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubIFluentRecipe.GetRecipe">
            <summary>Sets the stub of IFluentRecipe.GetRecipe()</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubIFluentRecipe.HasIngredientsStringSingle">
            <summary>Sets the stub of IFluentRecipe.HasIngredients(String Name, Single AmountToAdd)</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubIFluentRecipe.HasRecOperations">
            <summary>Sets the stub of IFluentRecipe.HasRecOperations()</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubIFluentRecipe.HasRecOperationsString">
            <summary>Sets the stub of IFluentRecipe.HasRecOperations(String RecOperation)</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubIFluentRecipe.SetBrandDescriptionString">
            <summary>Sets the stub of IFluentRecipe.SetBrandDescription(String BrandDescription)</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubIFluentRecipe.SetBrandNameString">
            <summary>Sets the stub of IFluentRecipe.SetBrandName(String BrandName)</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubIFluentRecipe.SetQualityTargetString">
            <summary>Sets the stub of IFluentRecipe.SetQualityTarget(String QTarget)</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.StubIFluentRecipeOperations">
            <summary>Stub type of BrewMLLib.IFluentRecipeOperations</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubIFluentRecipeOperations.#ctor">
            <summary>Initializes a new instance of type StubIFluentRecipeOperations</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubIFluentRecipeOperations.AddOperationString">
            <summary>Sets the stub of IFluentRecipeOperations.AddOperation(String Name)</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubIFluentRecipeOperations.bmll::BrewMLLib#IFluentRecipeOperations#AddOperation(System.String)">
            <summary>Sets the stub of IFluentRecipeOperations.AddOperation(String Name)</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubIFluentRecipeOperations.bmll::BrewMLLib#IFluentRecipeOperations#ForOperation(System.String)">
            <summary>Sets the stub of IFluentRecipeOperations.ForOperation(String Name)</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubIFluentRecipeOperations.bmll::BrewMLLib#IFluentRecipeOperations#GetRecUnitOperation">
            <summary>Sets the stub of IFluentRecipeOperations.GetRecUnitOperation()</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubIFluentRecipeOperations.bmll::BrewMLLib#IFluentRecipeOperations#HasAllowedUnits">
            <summary>Sets the stub of IFluentRecipeOperations.HasAllowedUnits()</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubIFluentRecipeOperations.bmll::BrewMLLib#IFluentRecipeOperations#HasTransitions">
            <summary>Sets the stub of IFluentRecipeOperations.HasTransitions()</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubIFluentRecipeOperations.bmll::BrewMLLib#IFluentRecipeOperations#SetSetPoint(System.Single)">
            <summary>Sets the stub of IFluentRecipeOperations.SetSetPoint(Single SetPoint)</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubIFluentRecipeOperations.ForOperationString">
            <summary>Sets the stub of IFluentRecipeOperations.ForOperation(String Name)</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubIFluentRecipeOperations.GetRecUnitOperation">
            <summary>Sets the stub of IFluentRecipeOperations.GetRecUnitOperation()</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubIFluentRecipeOperations.HasAllowedUnits">
            <summary>Sets the stub of IFluentRecipeOperations.HasAllowedUnits()</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubIFluentRecipeOperations.HasTransitions">
            <summary>Sets the stub of IFluentRecipeOperations.HasTransitions()</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubIFluentRecipeOperations.SetSetPointSingle">
            <summary>Sets the stub of IFluentRecipeOperations.SetSetPoint(Single SetPoint)</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.StubIFluentTest">
            <summary>Stub type of BrewMLLib.IFluentTest</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubIFluentTest.#ctor">
            <summary>Initializes a new instance of type StubIFluentTest</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubIFluentTest.bmll::BrewMLLib#IFluentTest#SetTestInt(System.Int32)">
            <summary>Sets the stub of IFluentTest.SetTestInt(Int32 s)</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubIFluentTest.bmll::BrewMLLib#IFluentTest#SetTestString(System.String)">
            <summary>Sets the stub of IFluentTest.SetTestString(String d)</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubIFluentTest.SetTestIntInt32">
            <summary>Sets the stub of IFluentTest.SetTestInt(Int32 s)</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubIFluentTest.SetTestStringString">
            <summary>Sets the stub of IFluentTest.SetTestString(String d)</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.StubIFluentTransitions">
            <summary>Stub type of BrewMLLib.IFluentTransitions</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubIFluentTransitions.#ctor">
            <summary>Initializes a new instance of type StubIFluentTransitions</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubIFluentTransitions.AddTranstionStringStringOperantsSingle">
            <summary>Sets the stub of IFluentTransitions.AddTranstion(String Name, String loopname, Operants op, Single SetPoint)</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubIFluentTransitions.bmll::BrewMLLib#IFluentTransitions#AddTranstion(System.String,System.String,BrewMLLib.Operants,System.Single)">
            <summary>Sets the stub of IFluentTransitions.AddTranstion(String Name, String loopname, Operants op, Single SetPoint)</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubIFluentTransitions.bmll::BrewMLLib#IFluentTransitions#ForTranstion(System.String)">
            <summary>Sets the stub of IFluentTransitions.ForTranstion(String Name)</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubIFluentTransitions.bmll::BrewMLLib#IFluentTransitions#GetTranstion">
            <summary>Sets the stub of IFluentTransitions.GetTranstion()</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubIFluentTransitions.bmll::BrewMLLib#IFluentTransitions#HasLoop(System.String)">
            <summary>Sets the stub of IFluentTransitions.HasLoop(String LoopName)</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubIFluentTransitions.bmll::BrewMLLib#IFluentTransitions#SetName(System.String)">
            <summary>Sets the stub of IFluentTransitions.SetName(String Name)</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubIFluentTransitions.bmll::BrewMLLib#IFluentTransitions#SetTime(System.Int32)">
            <summary>Sets the stub of IFluentTransitions.SetTime(Int32 Time)</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubIFluentTransitions.ForTranstionString">
            <summary>Sets the stub of IFluentTransitions.ForTranstion(String Name)</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubIFluentTransitions.GetTranstion">
            <summary>Sets the stub of IFluentTransitions.GetTranstion()</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubIFluentTransitions.HasLoopString">
            <summary>Sets the stub of IFluentTransitions.HasLoop(String LoopName)</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubIFluentTransitions.SetNameString">
            <summary>Sets the stub of IFluentTransitions.SetName(String Name)</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubIFluentTransitions.SetTimeInt32">
            <summary>Sets the stub of IFluentTransitions.SetTime(Int32 Time)</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.StubIFluentUnit">
            <summary>Stub type of BrewMLLib.IFluentUnit</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubIFluentUnit.#ctor">
            <summary>Initializes a new instance of type StubIFluentUnit</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubIFluentUnit.AddUnitString">
            <summary>Sets the stub of IFluentUnit.AddUnit(String UnitName)</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubIFluentUnit.bmll::BrewMLLib#IFluentUnit#AddUnit(System.String)">
            <summary>Sets the stub of IFluentUnit.AddUnit(String UnitName)</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubIFluentUnit.bmll::BrewMLLib#IFluentUnit#ForUnit(System.String)">
            <summary>Sets the stub of IFluentUnit.ForUnit(String Name)</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubIFluentUnit.bmll::BrewMLLib#IFluentUnit#GetPlant">
            <summary>Sets the stub of IFluentUnit.GetPlant()</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubIFluentUnit.bmll::BrewMLLib#IFluentUnit#GetUnit">
            <summary>Sets the stub of IFluentUnit.GetUnit()</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubIFluentUnit.bmll::BrewMLLib#IFluentUnit#HasAvailableOperations">
            <summary>Sets the stub of IFluentUnit.HasAvailableOperations()</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubIFluentUnit.bmll::BrewMLLib#IFluentUnit#HasCurrentEQOperation">
            <summary>Sets the stub of IFluentUnit.HasCurrentEQOperation()</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubIFluentUnit.bmll::BrewMLLib#IFluentUnit#HasLoops">
            <summary>Sets the stub of IFluentUnit.HasLoops()</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubIFluentUnit.bmll::BrewMLLib#IFluentUnit#SetUnitName(System.String)">
            <summary>Sets the stub of IFluentUnit.SetUnitName(String Name)</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubIFluentUnit.ForUnitString">
            <summary>Sets the stub of IFluentUnit.ForUnit(String Name)</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubIFluentUnit.GetPlant">
            <summary>Sets the stub of IFluentUnit.GetPlant()</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubIFluentUnit.GetUnit">
            <summary>Sets the stub of IFluentUnit.GetUnit()</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubIFluentUnit.HasAvailableOperations">
            <summary>Sets the stub of IFluentUnit.HasAvailableOperations()</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubIFluentUnit.HasCurrentEQOperation">
            <summary>Sets the stub of IFluentUnit.HasCurrentEQOperation()</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubIFluentUnit.HasLoops">
            <summary>Sets the stub of IFluentUnit.HasLoops()</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubIFluentUnit.SetUnitNameString">
            <summary>Sets the stub of IFluentUnit.SetUnitName(String Name)</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.StubIngredient">
            <summary>Stub type of BrewMLLib.Ingredient</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubIngredient.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubIngredient.AttachBackingFieldToIngredientType">
            <summary>Attaches delegates to emulate StubIngredient.IngredientType as a property with a backing field.</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubIngredient.IngredientTypeGet">
            <summary>Sets the stub of Ingredient.get_IngredientType()</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubIngredient.IngredientTypeSetIngredientType">
            <summary>Sets the stub of Ingredient.set_IngredientType(IngredientType value)</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubIngredient.InitializeStub">
            <summary>Initializes a new instance of type StubIngredient</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubIngredient.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubIngredient.IngredientType">
            <summary>Sets the stub of Ingredient.get_IngredientType()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubIngredient.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubIngredient.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.StubIngredientType">
            <summary>Stub type of BrewMLLib.IngredientType</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubIngredientType.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubIngredientType.InitializeStub">
            <summary>Initializes a new instance of type StubIngredientType</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubIngredientType.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubIngredientType.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubIngredientType.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.StubMasterRecipe">
            <summary>Stub type of BrewMLLib.MasterRecipe</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubMasterRecipe.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubMasterRecipe.AttachBackingFieldToIngredients">
            <summary>Attaches delegates to emulate StubMasterRecipe.Ingredients as a property with a backing field.</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubMasterRecipe.AttachBackingFieldToPlants">
            <summary>Attaches delegates to emulate StubMasterRecipe.Plants as a property with a backing field.</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubMasterRecipe.AttachBackingFieldToRecOperations">
            <summary>Attaches delegates to emulate StubMasterRecipe.RecOperations as a property with a backing field.</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubMasterRecipe.IngredientsGet">
            <summary>Sets the stub of MasterRecipe.get_Ingredients()</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubMasterRecipe.IngredientsSetICollectionOfIngredient">
            <summary>Sets the stub of MasterRecipe.set_Ingredients(ICollection`1&lt;Ingredient&gt; value)</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubMasterRecipe.InitializeStub">
            <summary>Initializes a new instance of type StubMasterRecipe</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubMasterRecipe.PlantsGet">
            <summary>Sets the stub of MasterRecipe.get_Plants()</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubMasterRecipe.PlantsSetICollectionOfPlant">
            <summary>Sets the stub of MasterRecipe.set_Plants(ICollection`1&lt;Plant&gt; value)</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubMasterRecipe.RecOperationsGet">
            <summary>Sets the stub of MasterRecipe.get_RecOperations()</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubMasterRecipe.RecOperationsSetICollectionOfRecUnitOperation">
            <summary>Sets the stub of MasterRecipe.set_RecOperations(ICollection`1&lt;RecUnitOperation&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubMasterRecipe.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubMasterRecipe.Ingredients">
            <summary>Sets the stub of MasterRecipe.get_Ingredients()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubMasterRecipe.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubMasterRecipe.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubMasterRecipe.Plants">
            <summary>Sets the stub of MasterRecipe.get_Plants()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubMasterRecipe.RecOperations">
            <summary>Sets the stub of MasterRecipe.get_RecOperations()</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.StubPlant">
            <summary>Stub type of BrewMLLib.Plant</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubPlant.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubPlant.AttachBackingFieldToPlantAux">
            <summary>Attaches delegates to emulate StubPlant.PlantAux as a property with a backing field.</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubPlant.AttachBackingFieldToPlantLoops">
            <summary>Attaches delegates to emulate StubPlant.PlantLoops as a property with a backing field.</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubPlant.AttachBackingFieldToPlantVessels">
            <summary>Attaches delegates to emulate StubPlant.PlantVessels as a property with a backing field.</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubPlant.AttachBackingFieldToThisPlantsBrands">
            <summary>Attaches delegates to emulate StubPlant.ThisPlantsBrands as a property with a backing field.</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubPlant.AttachBackingFieldToUnits">
            <summary>Attaches delegates to emulate StubPlant.Units as a property with a backing field.</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubPlant.InitializeStub">
            <summary>Initializes a new instance of type StubPlant</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubPlant.PlantAuxGet">
            <summary>Sets the stub of Plant.get_PlantAux()</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubPlant.PlantAuxSetICollectionOfEQAuxilary">
            <summary>Sets the stub of Plant.set_PlantAux(ICollection`1&lt;EQAuxilary&gt; value)</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubPlant.PlantLoopsGet">
            <summary>Sets the stub of Plant.get_PlantLoops()</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubPlant.PlantLoopsSetICollectionOfEQControlLoop">
            <summary>Sets the stub of Plant.set_PlantLoops(ICollection`1&lt;EQControlLoop&gt; value)</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubPlant.PlantVesselsGet">
            <summary>Sets the stub of Plant.get_PlantVessels()</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubPlant.PlantVesselsSetICollectionOfEQVessel">
            <summary>Sets the stub of Plant.set_PlantVessels(ICollection`1&lt;EQVessel&gt; value)</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubPlant.ThisPlantsBrandsGet">
            <summary>Sets the stub of Plant.get_ThisPlantsBrands()</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubPlant.ThisPlantsBrandsSetICollectionOfMasterRecipe">
            <summary>Sets the stub of Plant.set_ThisPlantsBrands(ICollection`1&lt;MasterRecipe&gt; value)</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubPlant.UnitsGet">
            <summary>Sets the stub of Plant.get_Units()</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubPlant.UnitsSetICollectionOfUnit">
            <summary>Sets the stub of Plant.set_Units(ICollection`1&lt;Unit&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubPlant.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubPlant.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubPlant.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubPlant.PlantAux">
            <summary>Sets the stub of Plant.get_PlantAux()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubPlant.PlantLoops">
            <summary>Sets the stub of Plant.get_PlantLoops()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubPlant.PlantVessels">
            <summary>Sets the stub of Plant.get_PlantVessels()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubPlant.ThisPlantsBrands">
            <summary>Sets the stub of Plant.get_ThisPlantsBrands()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubPlant.Units">
            <summary>Sets the stub of Plant.get_Units()</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.StubRecUnitOperation">
            <summary>Stub type of BrewMLLib.RecUnitOperation</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubRecUnitOperation.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubRecUnitOperation.AllowedUnitsGet">
            <summary>Sets the stub of RecUnitOperation.get_AllowedUnits()</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubRecUnitOperation.AllowedUnitsSetICollectionOfUnit">
            <summary>Sets the stub of RecUnitOperation.set_AllowedUnits(ICollection`1&lt;Unit&gt; value)</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubRecUnitOperation.AttachBackingFieldToAllowedUnits">
            <summary>Attaches delegates to emulate StubRecUnitOperation.AllowedUnits as a property with a backing field.</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubRecUnitOperation.InitializeStub">
            <summary>Initializes a new instance of type StubRecUnitOperation</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubRecUnitOperation.AllowedUnits">
            <summary>Sets the stub of RecUnitOperation.get_AllowedUnits()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubRecUnitOperation.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubRecUnitOperation.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubRecUnitOperation.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.StubTestEntitie">
            <summary>Stub type of BrewMLLib.TestEntitie</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubTestEntitie.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubTestEntitie.InitializeStub">
            <summary>Initializes a new instance of type StubTestEntitie</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubTestEntitie.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubTestEntitie.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubTestEntitie.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.StubTestEntitieBuilder">
            <summary>Stub type of BrewMLLib.TestEntitieBuilder</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubTestEntitieBuilder.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubTestEntitieBuilder.InitializeStub">
            <summary>Initializes a new instance of type StubTestEntitieBuilder</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubTestEntitieBuilder.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubTestEntitieBuilder.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubTestEntitieBuilder.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.StubTestEntitieTwo">
            <summary>Stub type of BrewMLLib.TestEntitieTwo</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubTestEntitieTwo.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubTestEntitieTwo.#ctor(System.String,System.Int32,System.Single)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubTestEntitieTwo.InitializeStub">
            <summary>Initializes a new instance of type StubTestEntitieTwo</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubTestEntitieTwo.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubTestEntitieTwo.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubTestEntitieTwo.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.StubTransition">
            <summary>Stub type of BrewMLLib.Transition</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubTransition.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubTransition.InitializeStub">
            <summary>Initializes a new instance of type StubTransition</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubTransition.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubTransition.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubTransition.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:BrewMLLib.Fakes.StubUnit">
            <summary>Stub type of BrewMLLib.Unit</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubUnit.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubUnit.AttachBackingFieldToAvailableOperations">
            <summary>Attaches delegates to emulate StubUnit.AvailableOperations as a property with a backing field.</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubUnit.AttachBackingFieldToInputUnits">
            <summary>Attaches delegates to emulate StubUnit.InputUnits as a property with a backing field.</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubUnit.AttachBackingFieldToOutputUnits">
            <summary>Attaches delegates to emulate StubUnit.OutputUnits as a property with a backing field.</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubUnit.AttachBackingFieldToPlant">
            <summary>Attaches delegates to emulate StubUnit.Plant as a property with a backing field.</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubUnit.AttachBackingFieldToUnitAux">
            <summary>Attaches delegates to emulate StubUnit.UnitAux as a property with a backing field.</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubUnit.AttachBackingFieldToUnitLoops">
            <summary>Attaches delegates to emulate StubUnit.UnitLoops as a property with a backing field.</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubUnit.AttachBackingFieldToUnitVessels">
            <summary>Attaches delegates to emulate StubUnit.UnitVessels as a property with a backing field.</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubUnit.AvailableOperationsGet">
            <summary>Sets the stub of Unit.get_AvailableOperations()</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubUnit.AvailableOperationsSetICollectionOfEQUnitOperation">
            <summary>Sets the stub of Unit.set_AvailableOperations(ICollection`1&lt;EQUnitOperation&gt; value)</summary>
        </member>
        <member name="M:BrewMLLib.Fakes.StubUnit.InitializeStub">
            <summary>Initializes a new instance of type StubUnit</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubUnit.InputUnitsGet">
            <summary>Sets the stub of Unit.get_InputUnits()</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubUnit.InputUnitsSetICollectionOfUnit">
            <summary>Sets the stub of Unit.set_InputUnits(ICollection`1&lt;Unit&gt; value)</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubUnit.OutputUnitsGet">
            <summary>Sets the stub of Unit.get_OutputUnits()</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubUnit.OutputUnitsSetICollectionOfUnit">
            <summary>Sets the stub of Unit.set_OutputUnits(ICollection`1&lt;Unit&gt; value)</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubUnit.PlantGet">
            <summary>Sets the stub of Unit.get_Plant()</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubUnit.PlantSetPlant">
            <summary>Sets the stub of Unit.set_Plant(Plant value)</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubUnit.UnitAuxGet">
            <summary>Sets the stub of Unit.get_UnitAux()</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubUnit.UnitAuxSetICollectionOfEQAuxilary">
            <summary>Sets the stub of Unit.set_UnitAux(ICollection`1&lt;EQAuxilary&gt; value)</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubUnit.UnitLoopsGet">
            <summary>Sets the stub of Unit.get_UnitLoops()</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubUnit.UnitLoopsSetICollectionOfEQControlLoop">
            <summary>Sets the stub of Unit.set_UnitLoops(ICollection`1&lt;EQControlLoop&gt; value)</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubUnit.UnitVesselsGet">
            <summary>Sets the stub of Unit.get_UnitVessels()</summary>
        </member>
        <member name="F:BrewMLLib.Fakes.StubUnit.UnitVesselsSetICollectionOfEQVessel">
            <summary>Sets the stub of Unit.set_UnitVessels(ICollection`1&lt;EQVessel&gt; value)</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubUnit.AvailableOperations">
            <summary>Sets the stub of Unit.get_AvailableOperations()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubUnit.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubUnit.InputUnits">
            <summary>Sets the stub of Unit.get_InputUnits()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubUnit.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubUnit.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubUnit.OutputUnits">
            <summary>Sets the stub of Unit.get_OutputUnits()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubUnit.Plant">
            <summary>Sets the stub of Unit.get_Plant()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubUnit.UnitAux">
            <summary>Sets the stub of Unit.get_UnitAux()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubUnit.UnitLoops">
            <summary>Sets the stub of Unit.get_UnitLoops()</summary>
        </member>
        <member name="P:BrewMLLib.Fakes.StubUnit.UnitVessels">
            <summary>Sets the stub of Unit.get_UnitVessels()</summary>
        </member>
        <member name="T:BrewMLLib.Migrations.Fakes.Shiminit">
            <summary>Shim type of BrewMLLib.Migrations.init</summary>
        </member>
        <member name="M:BrewMLLib.Migrations.Fakes.Shiminit.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:BrewMLLib.Migrations.Fakes.Shiminit.#ctor(BrewMLLib.Migrations.init)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:BrewMLLib.Migrations.Fakes.Shiminit.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:BrewMLLib.Migrations.Fakes.Shiminit.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:BrewMLLib.Migrations.Fakes.Shiminit.Bind(System.Data.Entity.Migrations.Infrastructure.IDbMigration)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:BrewMLLib.Migrations.Fakes.Shiminit.Bind(System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:BrewMLLib.Migrations.Fakes.Shiminit.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:BrewMLLib.Migrations.Fakes.Shiminit.Constructor">
            <summary>Sets the shim of init.init()</summary>
        </member>
        <member name="P:BrewMLLib.Migrations.Fakes.Shiminit.Down">
            <summary>Sets the shim of init.Down()</summary>
        </member>
        <member name="P:BrewMLLib.Migrations.Fakes.Shiminit.IdSystemDataEntityMigrationsInfrastructureIMigrationMetadataget">
            <summary>Sets the shim of init.System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata.get_Id()</summary>
        </member>
        <member name="P:BrewMLLib.Migrations.Fakes.Shiminit.SourceSystemDataEntityMigrationsInfrastructureIMigrationMetadataget">
            <summary>Sets the shim of init.System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata.get_Source()</summary>
        </member>
        <member name="P:BrewMLLib.Migrations.Fakes.Shiminit.TargetSystemDataEntityMigrationsInfrastructureIMigrationMetadataget">
            <summary>Sets the shim of init.System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata.get_Target()</summary>
        </member>
        <member name="P:BrewMLLib.Migrations.Fakes.Shiminit.Up">
            <summary>Sets the shim of init.Up()</summary>
        </member>
        <member name="T:BrewMLLib.Migrations.Fakes.Shiminit.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:BrewMLLib.Migrations.Fakes.Shiminit.AllInstances.Down">
            <summary>Sets the shim of init.Down()</summary>
        </member>
        <member name="P:BrewMLLib.Migrations.Fakes.Shiminit.AllInstances.IdSystemDataEntityMigrationsInfrastructureIMigrationMetadataget">
            <summary>Sets the shim of init.System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata.get_Id()</summary>
        </member>
        <member name="P:BrewMLLib.Migrations.Fakes.Shiminit.AllInstances.SourceSystemDataEntityMigrationsInfrastructureIMigrationMetadataget">
            <summary>Sets the shim of init.System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata.get_Source()</summary>
        </member>
        <member name="P:BrewMLLib.Migrations.Fakes.Shiminit.AllInstances.TargetSystemDataEntityMigrationsInfrastructureIMigrationMetadataget">
            <summary>Sets the shim of init.System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata.get_Target()</summary>
        </member>
        <member name="P:BrewMLLib.Migrations.Fakes.Shiminit.AllInstances.Up">
            <summary>Sets the shim of init.Up()</summary>
        </member>
        <member name="T:BrewMLLib.Models.Fakes.ShimEQControlLoop">
            <summary>Shim type of BrewMLLib.Models.EQControlLoop</summary>
        </member>
        <member name="M:BrewMLLib.Models.Fakes.ShimEQControlLoop.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:BrewMLLib.Models.Fakes.ShimEQControlLoop.#ctor(BrewMLLib.Models.EQControlLoop)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:BrewMLLib.Models.Fakes.ShimEQControlLoop.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:BrewMLLib.Models.Fakes.ShimEQControlLoop.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:BrewMLLib.Models.Fakes.ShimEQControlLoop.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:BrewMLLib.Models.Fakes.ShimEQControlLoop.Constructor">
            <summary>Sets the shim of EQControlLoop.EQControlLoop()</summary>
        </member>
        <member name="T:BrewMLLib.Models.Fakes.ShimEQControlLoop.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:BrewMLLib.Models.Fakes.StubEQControlLoop">
            <summary>Stub type of BrewMLLib.Models.EQControlLoop</summary>
        </member>
        <member name="M:BrewMLLib.Models.Fakes.StubEQControlLoop.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:BrewMLLib.Models.Fakes.StubEQControlLoop.InitializeStub">
            <summary>Initializes a new instance of type StubEQControlLoop</summary>
        </member>
        <member name="P:BrewMLLib.Models.Fakes.StubEQControlLoop.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:BrewMLLib.Models.Fakes.StubEQControlLoop.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:BrewMLLib.Models.Fakes.StubEQControlLoop.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
    </members>
</doc>
